/* 02c218e4f2b007f433b44ad734e42ee46b776d0f
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
  Decimal: any;
  Json: any;
  Long: any;
  MultiplierPath: any;
};
/** Query on the AssetToDraftAsset ancestor relation (M.Asset->M.Asset) */
export declare type AssetToDraftAssetPredicate = {
  assetToLinkedAsset_Parents?: Maybe<AssetToLinkedAssetPredicate>;
  assetToSelfLocalizations_Parent?: Maybe<AssetToSelfLocalizationsPredicate>;
  assetToSubtitleAsset_Parents?: Maybe<AssetToSubtitleAssetPredicate>;
  cmpCampaignToAsset?: Maybe<CmpCampaignToAssetPredicate>;
  cmpCampaignToMasterAsset?: Maybe<CmpCampaignToMasterAssetPredicate>;
  cmpContentToBriefAsset?: Maybe<CmpContentToBriefAssetPredicate>;
  cmpContentToLinkedAsset?: Maybe<CmpContentToLinkedAssetPredicate>;
  cmpContentToMasterLinkedAsset?: Maybe<CmpContentToMasterLinkedAssetPredicate>;
  contentCollectionToMasterAsset?: Maybe<ContentCollectionToMasterAssetPredicate>;
  localizationToAsset?: Maybe<LocalizationToAssetPredicate>;
  m_Asset_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToAsset?: Maybe<PcmBrandToAssetPredicate>;
  pCMBrandToMasterAsset?: Maybe<PcmBrandToMasterAssetPredicate>;
  pCMProductToAsset?: Maybe<PcmProductToAssetPredicate>;
  pCMProductToMasterAsset?: Maybe<PcmProductToMasterAssetPredicate>;
};
/** Query on the AssetToLinkedAsset ancestor relation (M.Asset->M.Asset) */
export declare type AssetToLinkedAssetPredicate = {
  assetToDraftAsset_Parent?: Maybe<AssetToDraftAssetPredicate>;
  assetToSelfLocalizations_Parent?: Maybe<AssetToSelfLocalizationsPredicate>;
  assetToSubtitleAsset_Parents?: Maybe<AssetToSubtitleAssetPredicate>;
  cmpCampaignToAsset?: Maybe<CmpCampaignToAssetPredicate>;
  cmpCampaignToMasterAsset?: Maybe<CmpCampaignToMasterAssetPredicate>;
  cmpContentToBriefAsset?: Maybe<CmpContentToBriefAssetPredicate>;
  cmpContentToLinkedAsset?: Maybe<CmpContentToLinkedAssetPredicate>;
  cmpContentToMasterLinkedAsset?: Maybe<CmpContentToMasterLinkedAssetPredicate>;
  contentCollectionToMasterAsset?: Maybe<ContentCollectionToMasterAssetPredicate>;
  localizationToAsset?: Maybe<LocalizationToAssetPredicate>;
  m_Asset_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToAsset?: Maybe<PcmBrandToAssetPredicate>;
  pCMBrandToMasterAsset?: Maybe<PcmBrandToMasterAssetPredicate>;
  pCMProductToAsset?: Maybe<PcmProductToAssetPredicate>;
  pCMProductToMasterAsset?: Maybe<PcmProductToMasterAssetPredicate>;
};
/** Query on the AssetToPublicLink ancestor relation (M.Asset->M.PublicLink) */
export declare type AssetToPublicLinkPredicate = {
  assetToDraftAsset_Parent?: Maybe<AssetToDraftAssetPredicate>;
  assetToLinkedAsset_Parents?: Maybe<AssetToLinkedAssetPredicate>;
  assetToSelfLocalizations_Parent?: Maybe<AssetToSelfLocalizationsPredicate>;
  assetToSubtitleAsset_Parents?: Maybe<AssetToSubtitleAssetPredicate>;
  cmpCampaignToAsset?: Maybe<CmpCampaignToAssetPredicate>;
  cmpCampaignToMasterAsset?: Maybe<CmpCampaignToMasterAssetPredicate>;
  cmpContentToBriefAsset?: Maybe<CmpContentToBriefAssetPredicate>;
  cmpContentToLinkedAsset?: Maybe<CmpContentToLinkedAssetPredicate>;
  cmpContentToMasterLinkedAsset?: Maybe<CmpContentToMasterLinkedAssetPredicate>;
  contentCollectionToMasterAsset?: Maybe<ContentCollectionToMasterAssetPredicate>;
  localizationToAsset?: Maybe<LocalizationToAssetPredicate>;
  m_Asset_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToAsset?: Maybe<PcmBrandToAssetPredicate>;
  pCMBrandToMasterAsset?: Maybe<PcmBrandToMasterAssetPredicate>;
  pCMProductToAsset?: Maybe<PcmProductToAssetPredicate>;
  pCMProductToMasterAsset?: Maybe<PcmProductToMasterAssetPredicate>;
};
/** Query on the AssetToSelfLocalizations ancestor relation (M.Asset->M.Asset) */
export declare type AssetToSelfLocalizationsPredicate = {
  assetToDraftAsset_Parent?: Maybe<AssetToDraftAssetPredicate>;
  assetToLinkedAsset_Parents?: Maybe<AssetToLinkedAssetPredicate>;
  assetToSubtitleAsset_Parents?: Maybe<AssetToSubtitleAssetPredicate>;
  cmpCampaignToAsset?: Maybe<CmpCampaignToAssetPredicate>;
  cmpCampaignToMasterAsset?: Maybe<CmpCampaignToMasterAssetPredicate>;
  cmpContentToBriefAsset?: Maybe<CmpContentToBriefAssetPredicate>;
  cmpContentToLinkedAsset?: Maybe<CmpContentToLinkedAssetPredicate>;
  cmpContentToMasterLinkedAsset?: Maybe<CmpContentToMasterLinkedAssetPredicate>;
  contentCollectionToMasterAsset?: Maybe<ContentCollectionToMasterAssetPredicate>;
  localizationToAsset?: Maybe<LocalizationToAssetPredicate>;
  m_Asset_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToAsset?: Maybe<PcmBrandToAssetPredicate>;
  pCMBrandToMasterAsset?: Maybe<PcmBrandToMasterAssetPredicate>;
  pCMProductToAsset?: Maybe<PcmProductToAssetPredicate>;
  pCMProductToMasterAsset?: Maybe<PcmProductToMasterAssetPredicate>;
};
/** Query on the AssetToSubtitleAsset ancestor relation (M.Asset->M.Asset) */
export declare type AssetToSubtitleAssetPredicate = {
  assetToDraftAsset_Parent?: Maybe<AssetToDraftAssetPredicate>;
  assetToLinkedAsset_Parents?: Maybe<AssetToLinkedAssetPredicate>;
  assetToSelfLocalizations_Parent?: Maybe<AssetToSelfLocalizationsPredicate>;
  cmpCampaignToAsset?: Maybe<CmpCampaignToAssetPredicate>;
  cmpCampaignToMasterAsset?: Maybe<CmpCampaignToMasterAssetPredicate>;
  cmpContentToBriefAsset?: Maybe<CmpContentToBriefAssetPredicate>;
  cmpContentToLinkedAsset?: Maybe<CmpContentToLinkedAssetPredicate>;
  cmpContentToMasterLinkedAsset?: Maybe<CmpContentToMasterLinkedAssetPredicate>;
  contentCollectionToMasterAsset?: Maybe<ContentCollectionToMasterAssetPredicate>;
  localizationToAsset?: Maybe<LocalizationToAssetPredicate>;
  m_Asset_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToAsset?: Maybe<PcmBrandToAssetPredicate>;
  pCMBrandToMasterAsset?: Maybe<PcmBrandToMasterAssetPredicate>;
  pCMProductToAsset?: Maybe<PcmProductToAssetPredicate>;
  pCMProductToMasterAsset?: Maybe<PcmProductToMasterAssetPredicate>;
};
/** Query on the AudienceToContent ancestor relation (M.CMP.Audience->M.Content) */
export declare type AudienceToContentPredicate = {
  m_CMP_Audience_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** C.Year */
export declare type C_Year = {
  __typename?: 'C_Year';
  /** C_YearToSelf (parent to child traversal) */
  c_YearToSelf_Children: C_YearList;
  /** C_YearToSelf (child to parent traversal) */
  c_YearToSelf_Parent?: Maybe<C_Year>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
  /** TaxonomyDescription */
  taxonomyDescription?: Maybe<Scalars['Json']>;
  /** TaxonomyLabel */
  taxonomyLabel?: Maybe<Scalars['Json']>;
  /** TaxonomyName */
  taxonomyName?: Maybe<Scalars['String']>;
  /** TaxonomySynonyms */
  taxonomySynonyms?: Maybe<Scalars['Json']>;
  /** YearToPCMProduct (parent to child traversal) */
  yearToPCMProduct: M_Pcm_ProductList;
};
/** C.Year */
export declare type C_YearC_YearToSelf_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<C_YearSorts>>>;
  where?: Maybe<C_Year_T_Predicate>;
};
/** C.Year */
export declare type C_YearYearToPcmProductArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type C_YearList = {
  __typename?: 'C_YearList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<C_Year>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum C_YearSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
  TaxonomydescriptionAsc = "TAXONOMYDESCRIPTION_ASC",
  TaxonomydescriptionDesc = "TAXONOMYDESCRIPTION_DESC",
  TaxonomylabelAsc = "TAXONOMYLABEL_ASC",
  TaxonomylabelDesc = "TAXONOMYLABEL_DESC",
  TaxonomynameAsc = "TAXONOMYNAME_ASC",
  TaxonomynameDesc = "TAXONOMYNAME_DESC",
  TaxonomysynonymsAsc = "TAXONOMYSYNONYMS_ASC",
  TaxonomysynonymsDesc = "TAXONOMYSYNONYMS_DESC",
}
/** Query on the C_YearToSelf ancestor relation (C.Year->C.Year) */
export declare type C_YearToSelfPredicate = {
  c_Year_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type C_Year_T_Predicate = {
  AND?: Maybe<Array<C_Year_T_Predicate>>;
  OR?: Maybe<Array<C_Year_T_Predicate>>;
  c_YearToSelf_Ancestors?: Maybe<Array<Scalars['ID']>>;
  c_YearToSelf_Parent?: Maybe<C_YearToSelfPredicate>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
  taxonomyName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxonomyName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxonomyName_contains?: Maybe<Scalars['String']>;
  taxonomyName_doesnotcontain?: Maybe<Scalars['String']>;
  taxonomyName_doesnotendwith?: Maybe<Scalars['String']>;
  taxonomyName_doesnotstartwith?: Maybe<Scalars['String']>;
  taxonomyName_endswith?: Maybe<Scalars['String']>;
  taxonomyName_eq?: Maybe<Scalars['String']>;
  taxonomyName_neq?: Maybe<Scalars['String']>;
  taxonomyName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxonomyName_startswith?: Maybe<Scalars['String']>;
};
/** Query on the CampaignToCampaignLocalization ancestor relation (M.CMP.Campaign->M.CMP.Campaign) */
export declare type CampaignToCampaignLocalizationPredicate = {
  campaignTypeToCampaign?: Maybe<CampaignTypeToCampaignPredicate>;
  localizationToCampaign?: Maybe<LocalizationToCampaignPredicate>;
  m_CMP_Campaign_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the CampaignToContent ancestor relation (M.CMP.Campaign->M.Content) */
export declare type CampaignToContentPredicate = {
  campaignToCampaignLocalization_Parent?: Maybe<CampaignToCampaignLocalizationPredicate>;
  campaignTypeToCampaign?: Maybe<CampaignTypeToCampaignPredicate>;
  localizationToCampaign?: Maybe<LocalizationToCampaignPredicate>;
  m_CMP_Campaign_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the CampaignTypeToCampaign ancestor relation (M.CMP.CampaignType->M.CMP.Campaign) */
export declare type CampaignTypeToCampaignPredicate = {
  m_CMP_CampaignType_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the ChannelAccountToContent ancestor relation (M.ChannelAccount->M.Content) */
export declare type ChannelAccountToContentPredicate = {
  channelToChannelAccount?: Maybe<ChannelToChannelAccountPredicate>;
  m_ChannelAccount_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the ChannelToChannelAccount ancestor relation (M.Channel->M.ChannelAccount) */
export declare type ChannelToChannelAccountPredicate = {
  m_Channel_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the CmpCampaignToAsset ancestor relation (M.CMP.Campaign->M.Asset) */
export declare type CmpCampaignToAssetPredicate = {
  campaignToCampaignLocalization_Parent?: Maybe<CampaignToCampaignLocalizationPredicate>;
  campaignTypeToCampaign?: Maybe<CampaignTypeToCampaignPredicate>;
  localizationToCampaign?: Maybe<LocalizationToCampaignPredicate>;
  m_CMP_Campaign_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the CmpCampaignToMasterAsset ancestor relation (M.CMP.Campaign->M.Asset) */
export declare type CmpCampaignToMasterAssetPredicate = {
  campaignToCampaignLocalization_Parent?: Maybe<CampaignToCampaignLocalizationPredicate>;
  campaignTypeToCampaign?: Maybe<CampaignTypeToCampaignPredicate>;
  localizationToCampaign?: Maybe<LocalizationToCampaignPredicate>;
  m_CMP_Campaign_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the CmpContentToBriefAsset ancestor relation (M.Content->M.Asset) */
export declare type CmpContentToBriefAssetPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the CmpContentToLinkedAsset ancestor relation (M.Content->M.Asset) */
export declare type CmpContentToLinkedAssetPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the CmpContentToMasterLinkedAsset ancestor relation (M.Content->M.Asset) */
export declare type CmpContentToMasterLinkedAssetPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the ContentCollectionToContent ancestor relation (M.ContentCollection->M.Content) */
export declare type ContentCollectionToContentPredicate = {
  m_ContentCollection_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the ContentCollectionToMasterAsset ancestor relation (M.ContentCollection->M.Asset) */
export declare type ContentCollectionToMasterAssetPredicate = {
  m_ContentCollection_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the ContentToContentAdaptation ancestor relation (M.Content->M.Content) */
export declare type ContentToContentAdaptationPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the ContentToContentDraft ancestor relation (M.Content->M.Content) */
export declare type ContentToContentDraftPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the ContentToContentLocalization ancestor relation (M.Content->M.Content) */
export declare type ContentToContentLocalizationPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the ContentToContentVariant ancestor relation (M.Content->M.Content) */
export declare type ContentToContentVariantPredicate = {
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  regionToContent?: Maybe<RegionToContentPredicate>;
};
/** Query on the ContentTypeToContent ancestor relation (M.ContentType->M.Content) */
export declare type ContentTypeToContentPredicate = {
  m_ContentType_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Faq */
export declare type Faq = {
  __typename?: 'Faq';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
};
export declare type FaqList = {
  __typename?: 'FaqList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<Faq>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare type FaqPredicate = {
  AND?: Maybe<Array<FaqPredicate>>;
  OR?: Maybe<Array<FaqPredicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
};
export declare enum FaqSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
}
export declare type Im_Content = {
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
};
export declare type Im_ContentAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
export declare type Im_ContentCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
export declare type Im_ContentChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
export declare type Im_ContentCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type Im_ContentCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type Im_ContentCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type Im_ContentContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
export declare type Im_ContentContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type Im_ContentContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type Im_ContentContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type Im_ContentPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type Im_ContentList = {
  /** Results for current page */
  results?: Maybe<Array<Maybe<Im_Content>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare type Im_Content_Advertisement = {
  /** Enter advertisement body text here */
  advertisement_Body?: Maybe<Scalars['String']>;
  /** Enter advertisement title here */
  advertisement_Title?: Maybe<Scalars['String']>;
};
export declare type Im_Content_Blog = {
  /** Edit blog body text here */
  blog_Body?: Maybe<Scalars['String']>;
  /** Add a quote here */
  blog_Quote?: Maybe<Scalars['String']>;
  /** Edit blog title here */
  blog_Title?: Maybe<Scalars['String']>;
};
export declare type Im_Content_Email = {
  /** Edit email body text here */
  email_Body?: Maybe<Scalars['String']>;
  /** Edit recipients here, separated by ; */
  email_Recipients?: Maybe<Scalars['String']>;
  /** Edit sender here */
  email_Sender?: Maybe<Scalars['String']>;
  /** Edit email subject here */
  email_Subject?: Maybe<Scalars['String']>;
};
export declare type Im_Content_Recipe = {
  /** Edit cooking instructions here */
  recipe_Cookinginstructions?: Maybe<Scalars['String']>;
  /** List the ingredients */
  recipe_Ingredients?: Maybe<Scalars['String']>;
  /** Add some nutritional facts */
  recipe_Nutritionalfacts?: Maybe<Scalars['String']>;
  /** Edit title here */
  recipe_Title?: Maybe<Scalars['String']>;
};
export declare type Im_Content_SocialMediaMessage = {
  /** Edit social media message body here */
  socialMediaMessage_Body?: Maybe<Scalars['String']>;
  /** Add tags here */
  socialMediaMessage_Footer?: Maybe<Scalars['String']>;
};
export declare type Im_Content_Webinar = {
  /** Edit webinar description text here */
  webinar_Description?: Maybe<Scalars['String']>;
  /** Edit title here */
  webinar_Title?: Maybe<Scalars['String']>;
};
export declare type Im_Content_WhitePaper = {
  /** Edit white paper body text here */
  whitePaper_Body?: Maybe<Scalars['String']>;
  /** Edit white paper footer text here */
  whitePaper_Footer?: Maybe<Scalars['String']>;
  /** Edit white paper header text here */
  whitePaper_Header?: Maybe<Scalars['String']>;
  /** Edit title here */
  whitePaper_Title?: Maybe<Scalars['String']>;
};
/** Query on the LocalizationToAsset ancestor relation (M.Localization->M.Asset) */
export declare type LocalizationToAssetPredicate = {
  m_Localization_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the LocalizationToCampaign ancestor relation (M.Localization->M.CMP.Campaign) */
export declare type LocalizationToCampaignPredicate = {
  m_Localization_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the LocalizationToContent ancestor relation (M.Localization->M.Content) */
export declare type LocalizationToContentPredicate = {
  m_Localization_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** M.Asset */
export declare type M_Asset = {
  __typename?: 'M_Asset';
  /** AlternateFile */
  alternateFile?: Maybe<Scalars['Json']>;
  /** ApprovalDate */
  approvalDate?: Maybe<Scalars['DateTime']>;
  /** ApprovedBy */
  approvedBy?: Maybe<Scalars['String']>;
  /** ArchivalDate */
  archivalDate?: Maybe<Scalars['DateTime']>;
  /** ArchivedBy */
  archivedBy?: Maybe<Scalars['String']>;
  /** AssetToDraftAsset (parent to child traversal) */
  assetToDraftAsset_Child?: Maybe<M_Asset>;
  /** AssetToDraftAsset (child to parent traversal) */
  assetToDraftAsset_Parent?: Maybe<M_Asset>;
  /** Assets linked to this asset (parent to child traversal) */
  assetToLinkedAsset_Children: M_AssetList;
  /** Assets linked to this asset (child to parent traversal) */
  assetToLinkedAsset_Parents: M_AssetList;
  /** AssetToPublicLink (parent to child traversal) */
  assetToPublicLink: M_PublicLinkList;
  /** AssetToSelfLocalizations (parent to child traversal) */
  assetToSelfLocalizations_Children: M_AssetList;
  /** AssetToSelfLocalizations (child to parent traversal) */
  assetToSelfLocalizations_Parent?: Maybe<M_Asset>;
  /** AssetToSubtitleAsset (parent to child traversal) */
  assetToSubtitleAsset_Children: M_AssetList;
  /** AssetToSubtitleAsset (child to parent traversal) */
  assetToSubtitleAsset_Parents: M_AssetList;
  /** Asset.Copyright */
  asset_Copyright?: Maybe<Scalars['String']>;
  /** Asset.DrmComplexity */
  asset_DrmComplexity?: Maybe<Scalars['Long']>;
  /** Asset.ExplicitApprovalRequired */
  asset_ExplicitApprovalRequired?: Maybe<Scalars['Boolean']>;
  /** Asset.HasComplexRightsProfiles */
  asset_HasComplexRightsProfiles?: Maybe<Scalars['Boolean']>;
  /** AverageRating */
  averageRating?: Maybe<Scalars['Decimal']>;
  /** CheckedOutIn */
  checkedOutIn?: Maybe<Scalars['String']>;
  /** ChiliType */
  chiliType?: Maybe<Scalars['String']>;
  /** CmpCampaignToAsset (child to parent traversal) */
  cmpCampaignToAsset: M_Cmp_CampaignList;
  /** CmpCampaignToMasterAsset (child to parent traversal) */
  cmpCampaignToMasterAsset: M_Cmp_CampaignList;
  /** CmpContentToBriefAsset (child to parent traversal) */
  cmpContentToBriefAsset: M_ContentList;
  /** CmpContentToLinkedAsset (child to parent traversal) */
  cmpContentToLinkedAsset: M_ContentList;
  /** CmpContentToMasterLinkedAsset (child to parent traversal) */
  cmpContentToMasterLinkedAsset: M_ContentList;
  /** ContentCollectionToMasterAsset (child to parent traversal) */
  contentCollectionToMasterAsset: M_ContentCollectionList;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** DeletedOn */
  deletedOn?: Maybe<Scalars['DateTime']>;
  /** Description */
  description?: Maybe<Scalars['Json']>;
  /** Digest */
  digest?: Maybe<Scalars['String']>;
  /** ExtraRenditions */
  extraRenditions?: Maybe<Scalars['Json']>;
  /** FileName */
  fileName?: Maybe<Scalars['String']>;
  /** FileProperties */
  fileProperties?: Maybe<Scalars['Json']>;
  /** FileSize */
  fileSize?: Maybe<Scalars['Decimal']>;
  /** FocalPointX */
  focalPointX?: Maybe<Scalars['Long']>;
  /** FocalPointY */
  focalPointY?: Maybe<Scalars['Long']>;
  /** HasDuplicate */
  hasDuplicate?: Maybe<Scalars['Boolean']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ImageSimilarityTags */
  imageSimilarityTags?: Maybe<Scalars['Json']>;
  /** IsCheckedOut */
  isCheckedOut?: Maybe<Scalars['Boolean']>;
  /** IsCheckingIn */
  isCheckingIn?: Maybe<Scalars['Boolean']>;
  /** IsDiscarding */
  isDiscarding?: Maybe<Scalars['Boolean']>;
  /** IsDraft */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** LocalizationToAsset (child to parent traversal) */
  localizationToAsset?: Maybe<M_Localization>;
  /** MainFile */
  mainFile?: Maybe<Scalars['Json']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMBrandToAsset (child to parent traversal) */
  pCMBrandToAsset: M_BrandList;
  /** PCMBrandToMasterAsset (child to parent traversal) */
  pCMBrandToMasterAsset: M_BrandList;
  /** PCMProductToAsset (child to parent traversal) */
  pCMProductToAsset: M_Pcm_ProductList;
  /** PCMProductToMasterAsset (child to parent traversal) */
  pCMProductToMasterAsset: M_Pcm_ProductList;
  /** ReasonForRejection */
  reasonForRejection?: Maybe<Scalars['String']>;
  /** ReasonForStatus */
  reasonForStatus?: Maybe<Scalars['String']>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
  /** RenditionsAccessTier */
  renditionsAccessTier?: Maybe<Scalars['String']>;
  /** RenditionsPurged */
  renditionsPurged?: Maybe<Scalars['Boolean']>;
  /** SitecoreMLStatus */
  sitecoreMLStatus?: Maybe<Scalars['String']>;
  /** Structure */
  structure?: Maybe<Scalars['Json']>;
  /** SubtitleLanguage */
  subtitleLanguage?: Maybe<Scalars['String']>;
  /** TemplateProperties */
  templateProperties?: Maybe<Scalars['Json']>;
  /** Title */
  title?: Maybe<Scalars['String']>;
  /** Urls */
  urls?: Maybe<Scalars['Json']>;
  /** VideoAI.Language */
  videoAI_Language?: Maybe<Scalars['String']>;
  /** VirusScanResult */
  virusScanResult?: Maybe<Scalars['String']>;
  /** VisionDescription */
  visionDescription?: Maybe<Scalars['Json']>;
  /** VisionOcrText */
  visionOcrText?: Maybe<Scalars['Json']>;
};
/** M.Asset */
export declare type M_AssetAssetToLinkedAsset_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Asset */
export declare type M_AssetAssetToLinkedAsset_ParentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Asset */
export declare type M_AssetAssetToPublicLinkArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_PublicLinkSorts>>>;
  where?: Maybe<M_PublicLinkPredicate>;
};
/** M.Asset */
export declare type M_AssetAssetToSelfLocalizations_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Asset */
export declare type M_AssetAssetToSubtitleAsset_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Asset */
export declare type M_AssetAssetToSubtitleAsset_ParentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Asset */
export declare type M_AssetCmpCampaignToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Asset */
export declare type M_AssetCmpCampaignToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Asset */
export declare type M_AssetCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Asset */
export declare type M_AssetCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Asset */
export declare type M_AssetCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Asset */
export declare type M_AssetContentCollectionToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Asset */
export declare type M_AssetPCmBrandToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_BrandSorts>>>;
  where?: Maybe<M_Brand_T_Predicate>;
};
/** M.Asset */
export declare type M_AssetPCmBrandToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_BrandSorts>>>;
  where?: Maybe<M_Brand_T_Predicate>;
};
/** M.Asset */
export declare type M_AssetPCmProductToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
/** M.Asset */
export declare type M_AssetPCmProductToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_AssetList = {
  __typename?: 'M_AssetList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Asset>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare type M_AssetPredicate = {
  AND?: Maybe<Array<M_AssetPredicate>>;
  OR?: Maybe<Array<M_AssetPredicate>>;
  approvalDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  approvalDate_eq?: Maybe<Scalars['DateTime']>;
  approvalDate_gt?: Maybe<Scalars['DateTime']>;
  approvalDate_lt?: Maybe<Scalars['DateTime']>;
  approvalDate_neq?: Maybe<Scalars['DateTime']>;
  approvedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedBy_contains?: Maybe<Scalars['String']>;
  approvedBy_doesnotcontain?: Maybe<Scalars['String']>;
  approvedBy_doesnotendwith?: Maybe<Scalars['String']>;
  approvedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  approvedBy_endswith?: Maybe<Scalars['String']>;
  approvedBy_eq?: Maybe<Scalars['String']>;
  approvedBy_neq?: Maybe<Scalars['String']>;
  approvedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedBy_startswith?: Maybe<Scalars['String']>;
  archivalDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  archivalDate_eq?: Maybe<Scalars['DateTime']>;
  archivalDate_gt?: Maybe<Scalars['DateTime']>;
  archivalDate_lt?: Maybe<Scalars['DateTime']>;
  archivalDate_neq?: Maybe<Scalars['DateTime']>;
  archivedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  archivedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  archivedBy_contains?: Maybe<Scalars['String']>;
  archivedBy_doesnotcontain?: Maybe<Scalars['String']>;
  archivedBy_doesnotendwith?: Maybe<Scalars['String']>;
  archivedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  archivedBy_endswith?: Maybe<Scalars['String']>;
  archivedBy_eq?: Maybe<Scalars['String']>;
  archivedBy_neq?: Maybe<Scalars['String']>;
  archivedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  archivedBy_startswith?: Maybe<Scalars['String']>;
  assetToDraftAsset_Ancestors?: Maybe<Array<Scalars['ID']>>;
  assetToDraftAsset_Parent?: Maybe<AssetToDraftAssetPredicate>;
  assetToLinkedAsset_Ancestors?: Maybe<Array<Scalars['ID']>>;
  assetToLinkedAsset_Parents?: Maybe<AssetToLinkedAssetPredicate>;
  assetToSelfLocalizations_Ancestors?: Maybe<Array<Scalars['ID']>>;
  assetToSelfLocalizations_Parent?: Maybe<AssetToSelfLocalizationsPredicate>;
  assetToSubtitleAsset_Ancestors?: Maybe<Array<Scalars['ID']>>;
  assetToSubtitleAsset_Parents?: Maybe<AssetToSubtitleAssetPredicate>;
  asset_Copyright_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  asset_Copyright_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  asset_Copyright_contains?: Maybe<Scalars['String']>;
  asset_Copyright_doesnotcontain?: Maybe<Scalars['String']>;
  asset_Copyright_doesnotendwith?: Maybe<Scalars['String']>;
  asset_Copyright_doesnotstartwith?: Maybe<Scalars['String']>;
  asset_Copyright_endswith?: Maybe<Scalars['String']>;
  asset_Copyright_eq?: Maybe<Scalars['String']>;
  asset_Copyright_neq?: Maybe<Scalars['String']>;
  asset_Copyright_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  asset_Copyright_startswith?: Maybe<Scalars['String']>;
  asset_DrmComplexity_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  asset_DrmComplexity_eq?: Maybe<Scalars['Long']>;
  asset_DrmComplexity_gt?: Maybe<Scalars['Long']>;
  asset_DrmComplexity_lt?: Maybe<Scalars['Long']>;
  asset_DrmComplexity_neq?: Maybe<Scalars['Long']>;
  asset_ExplicitApprovalRequired_eq?: Maybe<Scalars['Boolean']>;
  asset_ExplicitApprovalRequired_neq?: Maybe<Scalars['Boolean']>;
  asset_HasComplexRightsProfiles_eq?: Maybe<Scalars['Boolean']>;
  asset_HasComplexRightsProfiles_neq?: Maybe<Scalars['Boolean']>;
  averageRating_between?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  averageRating_eq?: Maybe<Scalars['Decimal']>;
  averageRating_gt?: Maybe<Scalars['Decimal']>;
  averageRating_lt?: Maybe<Scalars['Decimal']>;
  averageRating_neq?: Maybe<Scalars['Decimal']>;
  checkedOutIn_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  checkedOutIn_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  checkedOutIn_contains?: Maybe<Scalars['String']>;
  checkedOutIn_doesnotcontain?: Maybe<Scalars['String']>;
  checkedOutIn_doesnotendwith?: Maybe<Scalars['String']>;
  checkedOutIn_doesnotstartwith?: Maybe<Scalars['String']>;
  checkedOutIn_endswith?: Maybe<Scalars['String']>;
  checkedOutIn_eq?: Maybe<Scalars['String']>;
  checkedOutIn_neq?: Maybe<Scalars['String']>;
  checkedOutIn_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  checkedOutIn_startswith?: Maybe<Scalars['String']>;
  chiliType_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  chiliType_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  chiliType_contains?: Maybe<Scalars['String']>;
  chiliType_doesnotcontain?: Maybe<Scalars['String']>;
  chiliType_doesnotendwith?: Maybe<Scalars['String']>;
  chiliType_doesnotstartwith?: Maybe<Scalars['String']>;
  chiliType_endswith?: Maybe<Scalars['String']>;
  chiliType_eq?: Maybe<Scalars['String']>;
  chiliType_neq?: Maybe<Scalars['String']>;
  chiliType_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  chiliType_startswith?: Maybe<Scalars['String']>;
  cmpCampaignToAsset?: Maybe<CmpCampaignToAssetPredicate>;
  cmpCampaignToMasterAsset?: Maybe<CmpCampaignToMasterAssetPredicate>;
  cmpContentToBriefAsset?: Maybe<CmpContentToBriefAssetPredicate>;
  cmpContentToLinkedAsset?: Maybe<CmpContentToLinkedAssetPredicate>;
  cmpContentToMasterLinkedAsset?: Maybe<CmpContentToMasterLinkedAssetPredicate>;
  contentCollectionToMasterAsset?: Maybe<ContentCollectionToMasterAssetPredicate>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  deletedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  deletedOn_eq?: Maybe<Scalars['DateTime']>;
  deletedOn_gt?: Maybe<Scalars['DateTime']>;
  deletedOn_lt?: Maybe<Scalars['DateTime']>;
  deletedOn_neq?: Maybe<Scalars['DateTime']>;
  digest_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  digest_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  digest_contains?: Maybe<Scalars['String']>;
  digest_doesnotcontain?: Maybe<Scalars['String']>;
  digest_doesnotendwith?: Maybe<Scalars['String']>;
  digest_doesnotstartwith?: Maybe<Scalars['String']>;
  digest_endswith?: Maybe<Scalars['String']>;
  digest_eq?: Maybe<Scalars['String']>;
  digest_neq?: Maybe<Scalars['String']>;
  digest_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  digest_startswith?: Maybe<Scalars['String']>;
  fileName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_contains?: Maybe<Scalars['String']>;
  fileName_doesnotcontain?: Maybe<Scalars['String']>;
  fileName_doesnotendwith?: Maybe<Scalars['String']>;
  fileName_doesnotstartwith?: Maybe<Scalars['String']>;
  fileName_endswith?: Maybe<Scalars['String']>;
  fileName_eq?: Maybe<Scalars['String']>;
  fileName_neq?: Maybe<Scalars['String']>;
  fileName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_startswith?: Maybe<Scalars['String']>;
  fileSize_between?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  fileSize_eq?: Maybe<Scalars['Decimal']>;
  fileSize_gt?: Maybe<Scalars['Decimal']>;
  fileSize_lt?: Maybe<Scalars['Decimal']>;
  fileSize_neq?: Maybe<Scalars['Decimal']>;
  focalPointX_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  focalPointX_eq?: Maybe<Scalars['Long']>;
  focalPointX_gt?: Maybe<Scalars['Long']>;
  focalPointX_lt?: Maybe<Scalars['Long']>;
  focalPointX_neq?: Maybe<Scalars['Long']>;
  focalPointY_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  focalPointY_eq?: Maybe<Scalars['Long']>;
  focalPointY_gt?: Maybe<Scalars['Long']>;
  focalPointY_lt?: Maybe<Scalars['Long']>;
  focalPointY_neq?: Maybe<Scalars['Long']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  hasDuplicate_eq?: Maybe<Scalars['Boolean']>;
  hasDuplicate_neq?: Maybe<Scalars['Boolean']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  isCheckedOut_eq?: Maybe<Scalars['Boolean']>;
  isCheckedOut_neq?: Maybe<Scalars['Boolean']>;
  isCheckingIn_eq?: Maybe<Scalars['Boolean']>;
  isCheckingIn_neq?: Maybe<Scalars['Boolean']>;
  isDiscarding_eq?: Maybe<Scalars['Boolean']>;
  isDiscarding_neq?: Maybe<Scalars['Boolean']>;
  isDraft_eq?: Maybe<Scalars['Boolean']>;
  isDraft_neq?: Maybe<Scalars['Boolean']>;
  localizationToAsset?: Maybe<LocalizationToAssetPredicate>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  pCMBrandToAsset?: Maybe<PcmBrandToAssetPredicate>;
  pCMBrandToMasterAsset?: Maybe<PcmBrandToMasterAssetPredicate>;
  pCMProductToAsset?: Maybe<PcmProductToAssetPredicate>;
  pCMProductToMasterAsset?: Maybe<PcmProductToMasterAssetPredicate>;
  reasonForRejection_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  reasonForRejection_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  reasonForRejection_contains?: Maybe<Scalars['String']>;
  reasonForRejection_doesnotcontain?: Maybe<Scalars['String']>;
  reasonForRejection_doesnotendwith?: Maybe<Scalars['String']>;
  reasonForRejection_doesnotstartwith?: Maybe<Scalars['String']>;
  reasonForRejection_endswith?: Maybe<Scalars['String']>;
  reasonForRejection_eq?: Maybe<Scalars['String']>;
  reasonForRejection_neq?: Maybe<Scalars['String']>;
  reasonForRejection_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  reasonForRejection_startswith?: Maybe<Scalars['String']>;
  reasonForStatus_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  reasonForStatus_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  reasonForStatus_contains?: Maybe<Scalars['String']>;
  reasonForStatus_doesnotcontain?: Maybe<Scalars['String']>;
  reasonForStatus_doesnotendwith?: Maybe<Scalars['String']>;
  reasonForStatus_doesnotstartwith?: Maybe<Scalars['String']>;
  reasonForStatus_endswith?: Maybe<Scalars['String']>;
  reasonForStatus_eq?: Maybe<Scalars['String']>;
  reasonForStatus_neq?: Maybe<Scalars['String']>;
  reasonForStatus_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  reasonForStatus_startswith?: Maybe<Scalars['String']>;
  renditionsAccessTier_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  renditionsAccessTier_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  renditionsAccessTier_contains?: Maybe<Scalars['String']>;
  renditionsAccessTier_doesnotcontain?: Maybe<Scalars['String']>;
  renditionsAccessTier_doesnotendwith?: Maybe<Scalars['String']>;
  renditionsAccessTier_doesnotstartwith?: Maybe<Scalars['String']>;
  renditionsAccessTier_endswith?: Maybe<Scalars['String']>;
  renditionsAccessTier_eq?: Maybe<Scalars['String']>;
  renditionsAccessTier_neq?: Maybe<Scalars['String']>;
  renditionsAccessTier_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  renditionsAccessTier_startswith?: Maybe<Scalars['String']>;
  renditionsPurged_eq?: Maybe<Scalars['Boolean']>;
  renditionsPurged_neq?: Maybe<Scalars['Boolean']>;
  sitecoreMLStatus_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  sitecoreMLStatus_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  sitecoreMLStatus_contains?: Maybe<Scalars['String']>;
  sitecoreMLStatus_doesnotcontain?: Maybe<Scalars['String']>;
  sitecoreMLStatus_doesnotendwith?: Maybe<Scalars['String']>;
  sitecoreMLStatus_doesnotstartwith?: Maybe<Scalars['String']>;
  sitecoreMLStatus_endswith?: Maybe<Scalars['String']>;
  sitecoreMLStatus_eq?: Maybe<Scalars['String']>;
  sitecoreMLStatus_neq?: Maybe<Scalars['String']>;
  sitecoreMLStatus_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  sitecoreMLStatus_startswith?: Maybe<Scalars['String']>;
  subtitleLanguage_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitleLanguage_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitleLanguage_contains?: Maybe<Scalars['String']>;
  subtitleLanguage_doesnotcontain?: Maybe<Scalars['String']>;
  subtitleLanguage_doesnotendwith?: Maybe<Scalars['String']>;
  subtitleLanguage_doesnotstartwith?: Maybe<Scalars['String']>;
  subtitleLanguage_endswith?: Maybe<Scalars['String']>;
  subtitleLanguage_eq?: Maybe<Scalars['String']>;
  subtitleLanguage_neq?: Maybe<Scalars['String']>;
  subtitleLanguage_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitleLanguage_startswith?: Maybe<Scalars['String']>;
  title_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_doesnotcontain?: Maybe<Scalars['String']>;
  title_doesnotendwith?: Maybe<Scalars['String']>;
  title_doesnotstartwith?: Maybe<Scalars['String']>;
  title_endswith?: Maybe<Scalars['String']>;
  title_eq?: Maybe<Scalars['String']>;
  title_neq?: Maybe<Scalars['String']>;
  title_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_startswith?: Maybe<Scalars['String']>;
  videoAI_Language_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  videoAI_Language_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  videoAI_Language_contains?: Maybe<Scalars['String']>;
  videoAI_Language_doesnotcontain?: Maybe<Scalars['String']>;
  videoAI_Language_doesnotendwith?: Maybe<Scalars['String']>;
  videoAI_Language_doesnotstartwith?: Maybe<Scalars['String']>;
  videoAI_Language_endswith?: Maybe<Scalars['String']>;
  videoAI_Language_eq?: Maybe<Scalars['String']>;
  videoAI_Language_neq?: Maybe<Scalars['String']>;
  videoAI_Language_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  videoAI_Language_startswith?: Maybe<Scalars['String']>;
  virusScanResult_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  virusScanResult_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  virusScanResult_contains?: Maybe<Scalars['String']>;
  virusScanResult_doesnotcontain?: Maybe<Scalars['String']>;
  virusScanResult_doesnotendwith?: Maybe<Scalars['String']>;
  virusScanResult_doesnotstartwith?: Maybe<Scalars['String']>;
  virusScanResult_endswith?: Maybe<Scalars['String']>;
  virusScanResult_eq?: Maybe<Scalars['String']>;
  virusScanResult_neq?: Maybe<Scalars['String']>;
  virusScanResult_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  virusScanResult_startswith?: Maybe<Scalars['String']>;
};
export declare enum M_AssetSorts {
  AlternatefileAsc = "ALTERNATEFILE_ASC",
  AlternatefileDesc = "ALTERNATEFILE_DESC",
  ApprovaldateAsc = "APPROVALDATE_ASC",
  ApprovaldateDesc = "APPROVALDATE_DESC",
  ApprovedbyAsc = "APPROVEDBY_ASC",
  ApprovedbyDesc = "APPROVEDBY_DESC",
  ArchivaldateAsc = "ARCHIVALDATE_ASC",
  ArchivaldateDesc = "ARCHIVALDATE_DESC",
  ArchivedbyAsc = "ARCHIVEDBY_ASC",
  ArchivedbyDesc = "ARCHIVEDBY_DESC",
  AssetCopyrightAsc = "ASSET_COPYRIGHT_ASC",
  AssetCopyrightDesc = "ASSET_COPYRIGHT_DESC",
  AssetDrmcomplexityAsc = "ASSET_DRMCOMPLEXITY_ASC",
  AssetDrmcomplexityDesc = "ASSET_DRMCOMPLEXITY_DESC",
  AssetExplicitapprovalrequiredAsc = "ASSET_EXPLICITAPPROVALREQUIRED_ASC",
  AssetExplicitapprovalrequiredDesc = "ASSET_EXPLICITAPPROVALREQUIRED_DESC",
  AssetHascomplexrightsprofilesAsc = "ASSET_HASCOMPLEXRIGHTSPROFILES_ASC",
  AssetHascomplexrightsprofilesDesc = "ASSET_HASCOMPLEXRIGHTSPROFILES_DESC",
  AverageratingAsc = "AVERAGERATING_ASC",
  AverageratingDesc = "AVERAGERATING_DESC",
  CheckedoutinAsc = "CHECKEDOUTIN_ASC",
  CheckedoutinDesc = "CHECKEDOUTIN_DESC",
  ChilitypeAsc = "CHILITYPE_ASC",
  ChilitypeDesc = "CHILITYPE_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  DeletedonAsc = "DELETEDON_ASC",
  DeletedonDesc = "DELETEDON_DESC",
  DescriptionAsc = "DESCRIPTION_ASC",
  DescriptionDesc = "DESCRIPTION_DESC",
  DigestAsc = "DIGEST_ASC",
  DigestDesc = "DIGEST_DESC",
  ExtrarenditionsAsc = "EXTRARENDITIONS_ASC",
  ExtrarenditionsDesc = "EXTRARENDITIONS_DESC",
  FilenameAsc = "FILENAME_ASC",
  FilenameDesc = "FILENAME_DESC",
  FilepropertiesAsc = "FILEPROPERTIES_ASC",
  FilepropertiesDesc = "FILEPROPERTIES_DESC",
  FilesizeAsc = "FILESIZE_ASC",
  FilesizeDesc = "FILESIZE_DESC",
  FocalpointxAsc = "FOCALPOINTX_ASC",
  FocalpointxDesc = "FOCALPOINTX_DESC",
  FocalpointyAsc = "FOCALPOINTY_ASC",
  FocalpointyDesc = "FOCALPOINTY_DESC",
  HasduplicateAsc = "HASDUPLICATE_ASC",
  HasduplicateDesc = "HASDUPLICATE_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ImagesimilaritytagsAsc = "IMAGESIMILARITYTAGS_ASC",
  ImagesimilaritytagsDesc = "IMAGESIMILARITYTAGS_DESC",
  IscheckedoutAsc = "ISCHECKEDOUT_ASC",
  IscheckedoutDesc = "ISCHECKEDOUT_DESC",
  IscheckinginAsc = "ISCHECKINGIN_ASC",
  IscheckinginDesc = "ISCHECKINGIN_DESC",
  IsdiscardingAsc = "ISDISCARDING_ASC",
  IsdiscardingDesc = "ISDISCARDING_DESC",
  IsdraftAsc = "ISDRAFT_ASC",
  IsdraftDesc = "ISDRAFT_DESC",
  MainfileAsc = "MAINFILE_ASC",
  MainfileDesc = "MAINFILE_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  ReasonforrejectionAsc = "REASONFORREJECTION_ASC",
  ReasonforrejectionDesc = "REASONFORREJECTION_DESC",
  ReasonforstatusAsc = "REASONFORSTATUS_ASC",
  ReasonforstatusDesc = "REASONFORSTATUS_DESC",
  RenditionsaccesstierAsc = "RENDITIONSACCESSTIER_ASC",
  RenditionsaccesstierDesc = "RENDITIONSACCESSTIER_DESC",
  RenditionspurgedAsc = "RENDITIONSPURGED_ASC",
  RenditionspurgedDesc = "RENDITIONSPURGED_DESC",
  RenditionsAsc = "RENDITIONS_ASC",
  RenditionsDesc = "RENDITIONS_DESC",
  SitecoremlstatusAsc = "SITECOREMLSTATUS_ASC",
  SitecoremlstatusDesc = "SITECOREMLSTATUS_DESC",
  StructureAsc = "STRUCTURE_ASC",
  StructureDesc = "STRUCTURE_DESC",
  SubtitlelanguageAsc = "SUBTITLELANGUAGE_ASC",
  SubtitlelanguageDesc = "SUBTITLELANGUAGE_DESC",
  TemplatepropertiesAsc = "TEMPLATEPROPERTIES_ASC",
  TemplatepropertiesDesc = "TEMPLATEPROPERTIES_DESC",
  TitleAsc = "TITLE_ASC",
  TitleDesc = "TITLE_DESC",
  UrlsAsc = "URLS_ASC",
  UrlsDesc = "URLS_DESC",
  VideoaiLanguageAsc = "VIDEOAI_LANGUAGE_ASC",
  VideoaiLanguageDesc = "VIDEOAI_LANGUAGE_DESC",
  VirusscanresultAsc = "VIRUSSCANRESULT_ASC",
  VirusscanresultDesc = "VIRUSSCANRESULT_DESC",
  VisiondescriptionAsc = "VISIONDESCRIPTION_ASC",
  VisiondescriptionDesc = "VISIONDESCRIPTION_DESC",
  VisionocrtextAsc = "VISIONOCRTEXT_ASC",
  VisionocrtextDesc = "VISIONOCRTEXT_DESC",
}
/** M.Brand */
export declare type M_Brand = {
  __typename?: 'M_Brand';
  /** BrandDescription */
  brandDescription?: Maybe<Scalars['Json']>;
  /** BrandLabel */
  brandLabel?: Maybe<Scalars['Json']>;
  /** BrandName */
  brandName?: Maybe<Scalars['String']>;
  /** BrandSynonyms */
  brandSynonyms?: Maybe<Scalars['Json']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMBrandToAsset (parent to child traversal) */
  pCMBrandToAsset: M_AssetList;
  /** PCMBrandToMasterAsset (parent to child traversal) */
  pCMBrandToMasterAsset: M_AssetList;
  /** PCMBrandToSelf (parent to child traversal) */
  pCMBrandToSelf_Children: M_BrandList;
  /** PCMBrandToSelf (child to parent traversal) */
  pCMBrandToSelf_Parent?: Maybe<M_Brand>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.Brand */
export declare type M_BrandPCmBrandToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Brand */
export declare type M_BrandPCmBrandToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Brand */
export declare type M_BrandPCmBrandToSelf_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_BrandSorts>>>;
  where?: Maybe<M_Brand_T_Predicate>;
};
export declare type M_BrandList = {
  __typename?: 'M_BrandList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Brand>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_BrandSorts {
  BranddescriptionAsc = "BRANDDESCRIPTION_ASC",
  BranddescriptionDesc = "BRANDDESCRIPTION_DESC",
  BrandlabelAsc = "BRANDLABEL_ASC",
  BrandlabelDesc = "BRANDLABEL_DESC",
  BrandnameAsc = "BRANDNAME_ASC",
  BrandnameDesc = "BRANDNAME_DESC",
  BrandsynonymsAsc = "BRANDSYNONYMS_ASC",
  BrandsynonymsDesc = "BRANDSYNONYMS_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_Brand_T_Predicate = {
  AND?: Maybe<Array<M_Brand_T_Predicate>>;
  OR?: Maybe<Array<M_Brand_T_Predicate>>;
  brandName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  brandName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  brandName_contains?: Maybe<Scalars['String']>;
  brandName_doesnotcontain?: Maybe<Scalars['String']>;
  brandName_doesnotendwith?: Maybe<Scalars['String']>;
  brandName_doesnotstartwith?: Maybe<Scalars['String']>;
  brandName_endswith?: Maybe<Scalars['String']>;
  brandName_eq?: Maybe<Scalars['String']>;
  brandName_neq?: Maybe<Scalars['String']>;
  brandName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  brandName_startswith?: Maybe<Scalars['String']>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  pCMBrandToSelf_Ancestors?: Maybe<Array<Scalars['ID']>>;
  pCMBrandToSelf_Parent?: Maybe<PcmBrandToSelfPredicate>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.CMP.Audience */
export declare type M_Cmp_Audience = {
  __typename?: 'M_CMP_Audience';
  /** AudienceToContent (parent to child traversal) */
  audienceToContent: M_ContentList;
  /** Audience.Label */
  audience_Label?: Maybe<Scalars['Json']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.CMP.Audience */
export declare type M_Cmp_AudienceAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type M_Cmp_AudienceList = {
  __typename?: 'M_CMP_AudienceList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Cmp_Audience>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_Cmp_AudienceSorts {
  AudienceLabelAsc = "AUDIENCE_LABEL_ASC",
  AudienceLabelDesc = "AUDIENCE_LABEL_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_Cmp_Audience_T_Predicate = {
  AND?: Maybe<Array<M_Cmp_Audience_T_Predicate>>;
  OR?: Maybe<Array<M_Cmp_Audience_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.CMP.Campaign */
export declare type M_Cmp_Campaign = {
  __typename?: 'M_CMP_Campaign';
  /** CampaignToCampaignLocalization (parent to child traversal) */
  campaignToCampaignLocalization_Children: M_Cmp_CampaignList;
  /** CampaignToCampaignLocalization (child to parent traversal) */
  campaignToCampaignLocalization_Parent?: Maybe<M_Cmp_Campaign>;
  /** CampaignToContent (parent to child traversal) */
  campaignToContent: M_ContentList;
  /** CampaignTypeToCampaign (child to parent traversal) */
  campaignTypeToCampaign?: Maybe<M_Cmp_CampaignType>;
  /** Campaign.EndDate */
  campaign_EndDate?: Maybe<Scalars['DateTime']>;
  /** Campaign.Impact */
  campaign_Impact?: Maybe<Scalars['Long']>;
  /** Campaign.IsTemplate */
  campaign_IsTemplate?: Maybe<Scalars['Boolean']>;
  /** Campaign.Name */
  campaign_Name?: Maybe<Scalars['String']>;
  /** Campaign.StartDate */
  campaign_StartDate?: Maybe<Scalars['DateTime']>;
  /** CmpCampaignToAsset (parent to child traversal) */
  cmpCampaignToAsset: M_AssetList;
  /** CmpCampaignToMasterAsset (parent to child traversal) */
  cmpCampaignToMasterAsset: M_AssetList;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToCampaign (child to parent traversal) */
  localizationToCampaign?: Maybe<M_Localization>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.CMP.Campaign */
export declare type M_Cmp_CampaignCampaignToCampaignLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.CMP.Campaign */
export declare type M_Cmp_CampaignCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.CMP.Campaign */
export declare type M_Cmp_CampaignCmpCampaignToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.CMP.Campaign */
export declare type M_Cmp_CampaignCmpCampaignToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type M_Cmp_CampaignList = {
  __typename?: 'M_CMP_CampaignList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Cmp_Campaign>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_Cmp_CampaignSorts {
  CampaignEnddateAsc = "CAMPAIGN_ENDDATE_ASC",
  CampaignEnddateDesc = "CAMPAIGN_ENDDATE_DESC",
  CampaignImpactAsc = "CAMPAIGN_IMPACT_ASC",
  CampaignImpactDesc = "CAMPAIGN_IMPACT_DESC",
  CampaignIstemplateAsc = "CAMPAIGN_ISTEMPLATE_ASC",
  CampaignIstemplateDesc = "CAMPAIGN_ISTEMPLATE_DESC",
  CampaignNameAsc = "CAMPAIGN_NAME_ASC",
  CampaignNameDesc = "CAMPAIGN_NAME_DESC",
  CampaignStartdateAsc = "CAMPAIGN_STARTDATE_ASC",
  CampaignStartdateDesc = "CAMPAIGN_STARTDATE_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
/** M.CMP.CampaignType */
export declare type M_Cmp_CampaignType = {
  __typename?: 'M_CMP_CampaignType';
  /** CampaignTypeToCampaign (parent to child traversal) */
  campaignTypeToCampaign: M_Cmp_CampaignList;
  /** CampaignType.Label */
  campaignType_Label?: Maybe<Scalars['Json']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.CMP.CampaignType */
export declare type M_Cmp_CampaignTypeCampaignTypeToCampaignArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
export declare type M_Cmp_CampaignTypeList = {
  __typename?: 'M_CMP_CampaignTypeList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Cmp_CampaignType>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_Cmp_CampaignTypeSorts {
  CampaigntypeLabelAsc = "CAMPAIGNTYPE_LABEL_ASC",
  CampaigntypeLabelDesc = "CAMPAIGNTYPE_LABEL_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_Cmp_CampaignType_T_Predicate = {
  AND?: Maybe<Array<M_Cmp_CampaignType_T_Predicate>>;
  OR?: Maybe<Array<M_Cmp_CampaignType_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
export declare type M_Cmp_Campaign_T_Predicate = {
  AND?: Maybe<Array<M_Cmp_Campaign_T_Predicate>>;
  OR?: Maybe<Array<M_Cmp_Campaign_T_Predicate>>;
  campaignToCampaignLocalization_Ancestors?: Maybe<Array<Scalars['ID']>>;
  campaignToCampaignLocalization_Parent?: Maybe<CampaignToCampaignLocalizationPredicate>;
  campaignTypeToCampaign?: Maybe<CampaignTypeToCampaignPredicate>;
  campaign_EndDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  campaign_EndDate_eq?: Maybe<Scalars['DateTime']>;
  campaign_EndDate_gt?: Maybe<Scalars['DateTime']>;
  campaign_EndDate_lt?: Maybe<Scalars['DateTime']>;
  campaign_EndDate_neq?: Maybe<Scalars['DateTime']>;
  campaign_Impact_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  campaign_Impact_eq?: Maybe<Scalars['Long']>;
  campaign_Impact_gt?: Maybe<Scalars['Long']>;
  campaign_Impact_lt?: Maybe<Scalars['Long']>;
  campaign_Impact_neq?: Maybe<Scalars['Long']>;
  campaign_IsTemplate_eq?: Maybe<Scalars['Boolean']>;
  campaign_IsTemplate_neq?: Maybe<Scalars['Boolean']>;
  campaign_Name_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  campaign_Name_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  campaign_Name_contains?: Maybe<Scalars['String']>;
  campaign_Name_doesnotcontain?: Maybe<Scalars['String']>;
  campaign_Name_doesnotendwith?: Maybe<Scalars['String']>;
  campaign_Name_doesnotstartwith?: Maybe<Scalars['String']>;
  campaign_Name_endswith?: Maybe<Scalars['String']>;
  campaign_Name_eq?: Maybe<Scalars['String']>;
  campaign_Name_neq?: Maybe<Scalars['String']>;
  campaign_Name_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  campaign_Name_startswith?: Maybe<Scalars['String']>;
  campaign_StartDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  campaign_StartDate_eq?: Maybe<Scalars['DateTime']>;
  campaign_StartDate_gt?: Maybe<Scalars['DateTime']>;
  campaign_StartDate_lt?: Maybe<Scalars['DateTime']>;
  campaign_StartDate_neq?: Maybe<Scalars['DateTime']>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  localizationToCampaign?: Maybe<LocalizationToCampaignPredicate>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.CMP.Region */
export declare type M_Cmp_Region = {
  __typename?: 'M_CMP_Region';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
  /** RegionToContent (parent to child traversal) */
  regionToContent: M_ContentList;
  /** Region.Label */
  region_Label?: Maybe<Scalars['Json']>;
};
/** M.CMP.Region */
export declare type M_Cmp_RegionRegionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type M_Cmp_RegionList = {
  __typename?: 'M_CMP_RegionList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Cmp_Region>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_Cmp_RegionSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
  RegionLabelAsc = "REGION_LABEL_ASC",
  RegionLabelDesc = "REGION_LABEL_DESC",
}
export declare type M_Cmp_Region_T_Predicate = {
  AND?: Maybe<Array<M_Cmp_Region_T_Predicate>>;
  OR?: Maybe<Array<M_Cmp_Region_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.Channel */
export declare type M_Channel = {
  __typename?: 'M_Channel';
  /** ChannelToChannelAccount (parent to child traversal) */
  channelToChannelAccount: M_ChannelAccountList;
  /** Channel.Label */
  channel_Label?: Maybe<Scalars['Json']>;
  /** Channel.Limit */
  channel_Limit?: Maybe<Scalars['Long']>;
  /** Channel.Name */
  channel_Name?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.Channel */
export declare type M_ChannelChannelToChannelAccountArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.ChannelAccount */
export declare type M_ChannelAccount = {
  __typename?: 'M_ChannelAccount';
  /** ChannelAccountToContent (parent to child traversal) */
  channelAccountToContent: M_ContentList;
  /** ChannelAccount.External */
  channelAccount_External?: Maybe<Scalars['Json']>;
  /** ChannelAccount.ExternalIdentifier */
  channelAccount_ExternalIdentifier?: Maybe<Scalars['String']>;
  /** ChannelAccount.IsActive */
  channelAccount_IsActive?: Maybe<Scalars['Boolean']>;
  /** ChannelAccount.Label */
  channelAccount_Label?: Maybe<Scalars['Json']>;
  /** ChannelAccount.Name */
  channelAccount_Name?: Maybe<Scalars['String']>;
  /** ChannelToChannelAccount (child to parent traversal) */
  channelToChannelAccount?: Maybe<M_Channel>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.ChannelAccount */
export declare type M_ChannelAccountChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type M_ChannelAccountList = {
  __typename?: 'M_ChannelAccountList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_ChannelAccount>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_ChannelAccountSorts {
  ChannelaccountExternalidentifierAsc = "CHANNELACCOUNT_EXTERNALIDENTIFIER_ASC",
  ChannelaccountExternalidentifierDesc = "CHANNELACCOUNT_EXTERNALIDENTIFIER_DESC",
  ChannelaccountExternalAsc = "CHANNELACCOUNT_EXTERNAL_ASC",
  ChannelaccountExternalDesc = "CHANNELACCOUNT_EXTERNAL_DESC",
  ChannelaccountIsactiveAsc = "CHANNELACCOUNT_ISACTIVE_ASC",
  ChannelaccountIsactiveDesc = "CHANNELACCOUNT_ISACTIVE_DESC",
  ChannelaccountLabelAsc = "CHANNELACCOUNT_LABEL_ASC",
  ChannelaccountLabelDesc = "CHANNELACCOUNT_LABEL_DESC",
  ChannelaccountNameAsc = "CHANNELACCOUNT_NAME_ASC",
  ChannelaccountNameDesc = "CHANNELACCOUNT_NAME_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_ChannelAccount_T_Predicate = {
  AND?: Maybe<Array<M_ChannelAccount_T_Predicate>>;
  OR?: Maybe<Array<M_ChannelAccount_T_Predicate>>;
  channelAccount_ExternalIdentifier_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelAccount_ExternalIdentifier_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelAccount_ExternalIdentifier_contains?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_doesnotcontain?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_doesnotendwith?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_doesnotstartwith?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_endswith?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_eq?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_neq?: Maybe<Scalars['String']>;
  channelAccount_ExternalIdentifier_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelAccount_ExternalIdentifier_startswith?: Maybe<Scalars['String']>;
  channelAccount_IsActive_eq?: Maybe<Scalars['Boolean']>;
  channelAccount_IsActive_neq?: Maybe<Scalars['Boolean']>;
  channelAccount_Name_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelAccount_Name_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelAccount_Name_contains?: Maybe<Scalars['String']>;
  channelAccount_Name_doesnotcontain?: Maybe<Scalars['String']>;
  channelAccount_Name_doesnotendwith?: Maybe<Scalars['String']>;
  channelAccount_Name_doesnotstartwith?: Maybe<Scalars['String']>;
  channelAccount_Name_endswith?: Maybe<Scalars['String']>;
  channelAccount_Name_eq?: Maybe<Scalars['String']>;
  channelAccount_Name_neq?: Maybe<Scalars['String']>;
  channelAccount_Name_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelAccount_Name_startswith?: Maybe<Scalars['String']>;
  channelToChannelAccount?: Maybe<ChannelToChannelAccountPredicate>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
export declare type M_ChannelList = {
  __typename?: 'M_ChannelList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Channel>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_ChannelSorts {
  ChannelLabelAsc = "CHANNEL_LABEL_ASC",
  ChannelLabelDesc = "CHANNEL_LABEL_DESC",
  ChannelLimitAsc = "CHANNEL_LIMIT_ASC",
  ChannelLimitDesc = "CHANNEL_LIMIT_DESC",
  ChannelNameAsc = "CHANNEL_NAME_ASC",
  ChannelNameDesc = "CHANNEL_NAME_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_Channel_T_Predicate = {
  AND?: Maybe<Array<M_Channel_T_Predicate>>;
  OR?: Maybe<Array<M_Channel_T_Predicate>>;
  channel_Limit_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  channel_Limit_eq?: Maybe<Scalars['Long']>;
  channel_Limit_gt?: Maybe<Scalars['Long']>;
  channel_Limit_lt?: Maybe<Scalars['Long']>;
  channel_Limit_neq?: Maybe<Scalars['Long']>;
  channel_Name_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channel_Name_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channel_Name_contains?: Maybe<Scalars['String']>;
  channel_Name_doesnotcontain?: Maybe<Scalars['String']>;
  channel_Name_doesnotendwith?: Maybe<Scalars['String']>;
  channel_Name_doesnotstartwith?: Maybe<Scalars['String']>;
  channel_Name_endswith?: Maybe<Scalars['String']>;
  channel_Name_eq?: Maybe<Scalars['String']>;
  channel_Name_neq?: Maybe<Scalars['String']>;
  channel_Name_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  channel_Name_startswith?: Maybe<Scalars['String']>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.Content */
export declare type M_Content = Im_Content & Im_Content_Advertisement & Im_Content_Blog & Im_Content_Email & Im_Content_Recipe & Im_Content_SocialMediaMessage & Im_Content_Webinar & Im_Content_WhitePaper & {
  __typename?: 'M_Content';
  /** Enter advertisement body text here */
  advertisement_Body?: Maybe<Scalars['String']>;
  /** Enter advertisement title here */
  advertisement_Title?: Maybe<Scalars['String']>;
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** Edit blog body text here */
  blog_Body?: Maybe<Scalars['String']>;
  /** Add a quote here */
  blog_Quote?: Maybe<Scalars['String']>;
  /** Edit blog title here */
  blog_Title?: Maybe<Scalars['String']>;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Edit email body text here */
  email_Body?: Maybe<Scalars['String']>;
  /** Edit recipients here, separated by ; */
  email_Recipients?: Maybe<Scalars['String']>;
  /** Edit sender here */
  email_Sender?: Maybe<Scalars['String']>;
  /** Edit email subject here */
  email_Subject?: Maybe<Scalars['String']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** Edit cooking instructions here */
  recipe_Cookinginstructions?: Maybe<Scalars['String']>;
  /** List the ingredients */
  recipe_Ingredients?: Maybe<Scalars['String']>;
  /** Add some nutritional facts */
  recipe_Nutritionalfacts?: Maybe<Scalars['String']>;
  /** Edit title here */
  recipe_Title?: Maybe<Scalars['String']>;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
  /** Edit social media message body here */
  socialMediaMessage_Body?: Maybe<Scalars['String']>;
  /** Add tags here */
  socialMediaMessage_Footer?: Maybe<Scalars['String']>;
  /** Edit webinar description text here */
  webinar_Description?: Maybe<Scalars['String']>;
  /** Edit title here */
  webinar_Title?: Maybe<Scalars['String']>;
  /** Edit white paper body text here */
  whitePaper_Body?: Maybe<Scalars['String']>;
  /** Edit white paper footer text here */
  whitePaper_Footer?: Maybe<Scalars['String']>;
  /** Edit white paper header text here */
  whitePaper_Header?: Maybe<Scalars['String']>;
  /** Edit title here */
  whitePaper_Title?: Maybe<Scalars['String']>;
};
/** M.Content */
export declare type M_ContentAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_ContentCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_ContentChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_ContentCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_ContentCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_ContentCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_ContentContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_ContentContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_ContentContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_ContentContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_ContentPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
/** M.ContentCollection */
export declare type M_ContentCollection = {
  __typename?: 'M_ContentCollection';
  /** ContentCollectionDescription */
  contentCollectionDescription?: Maybe<Scalars['String']>;
  /** ContentCollectionName */
  contentCollectionName?: Maybe<Scalars['String']>;
  /** ContentCollectionToContent (parent to child traversal) */
  contentCollectionToContent: M_ContentList;
  /** ContentCollectionToMasterAsset (parent to child traversal) */
  contentCollectionToMasterAsset: M_AssetList;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.ContentCollection */
export declare type M_ContentCollectionContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.ContentCollection */
export declare type M_ContentCollectionContentCollectionToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type M_ContentCollectionList = {
  __typename?: 'M_ContentCollectionList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_ContentCollection>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_ContentCollectionSorts {
  ContentcollectiondescriptionAsc = "CONTENTCOLLECTIONDESCRIPTION_ASC",
  ContentcollectiondescriptionDesc = "CONTENTCOLLECTIONDESCRIPTION_DESC",
  ContentcollectionnameAsc = "CONTENTCOLLECTIONNAME_ASC",
  ContentcollectionnameDesc = "CONTENTCOLLECTIONNAME_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_ContentCollection_T_Predicate = {
  AND?: Maybe<Array<M_ContentCollection_T_Predicate>>;
  OR?: Maybe<Array<M_ContentCollection_T_Predicate>>;
  contentCollectionDescription_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentCollectionDescription_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentCollectionDescription_contains?: Maybe<Scalars['String']>;
  contentCollectionDescription_doesnotcontain?: Maybe<Scalars['String']>;
  contentCollectionDescription_doesnotendwith?: Maybe<Scalars['String']>;
  contentCollectionDescription_doesnotstartwith?: Maybe<Scalars['String']>;
  contentCollectionDescription_endswith?: Maybe<Scalars['String']>;
  contentCollectionDescription_eq?: Maybe<Scalars['String']>;
  contentCollectionDescription_neq?: Maybe<Scalars['String']>;
  contentCollectionDescription_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentCollectionDescription_startswith?: Maybe<Scalars['String']>;
  contentCollectionName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentCollectionName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentCollectionName_contains?: Maybe<Scalars['String']>;
  contentCollectionName_doesnotcontain?: Maybe<Scalars['String']>;
  contentCollectionName_doesnotendwith?: Maybe<Scalars['String']>;
  contentCollectionName_doesnotstartwith?: Maybe<Scalars['String']>;
  contentCollectionName_endswith?: Maybe<Scalars['String']>;
  contentCollectionName_eq?: Maybe<Scalars['String']>;
  contentCollectionName_neq?: Maybe<Scalars['String']>;
  contentCollectionName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentCollectionName_startswith?: Maybe<Scalars['String']>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
export declare type M_ContentList = Im_ContentList & {
  __typename?: 'M_ContentList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<Im_Content>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare type M_ContentPredicate = {
  AND?: Maybe<Array<M_ContentPredicate>>;
  OR?: Maybe<Array<M_ContentPredicate>>;
  advertisement_Body_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  advertisement_Body_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  advertisement_Body_contains?: Maybe<Scalars['String']>;
  advertisement_Body_doesnotcontain?: Maybe<Scalars['String']>;
  advertisement_Body_doesnotendwith?: Maybe<Scalars['String']>;
  advertisement_Body_doesnotstartwith?: Maybe<Scalars['String']>;
  advertisement_Body_endswith?: Maybe<Scalars['String']>;
  advertisement_Body_eq?: Maybe<Scalars['String']>;
  advertisement_Body_neq?: Maybe<Scalars['String']>;
  advertisement_Body_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  advertisement_Body_startswith?: Maybe<Scalars['String']>;
  advertisement_Title_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  advertisement_Title_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  advertisement_Title_contains?: Maybe<Scalars['String']>;
  advertisement_Title_doesnotcontain?: Maybe<Scalars['String']>;
  advertisement_Title_doesnotendwith?: Maybe<Scalars['String']>;
  advertisement_Title_doesnotstartwith?: Maybe<Scalars['String']>;
  advertisement_Title_endswith?: Maybe<Scalars['String']>;
  advertisement_Title_eq?: Maybe<Scalars['String']>;
  advertisement_Title_neq?: Maybe<Scalars['String']>;
  advertisement_Title_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  advertisement_Title_startswith?: Maybe<Scalars['String']>;
  audienceToContent?: Maybe<AudienceToContentPredicate>;
  blog_Body_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Body_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Body_contains?: Maybe<Scalars['String']>;
  blog_Body_doesnotcontain?: Maybe<Scalars['String']>;
  blog_Body_doesnotendwith?: Maybe<Scalars['String']>;
  blog_Body_doesnotstartwith?: Maybe<Scalars['String']>;
  blog_Body_endswith?: Maybe<Scalars['String']>;
  blog_Body_eq?: Maybe<Scalars['String']>;
  blog_Body_neq?: Maybe<Scalars['String']>;
  blog_Body_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Body_startswith?: Maybe<Scalars['String']>;
  blog_Quote_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Quote_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Quote_contains?: Maybe<Scalars['String']>;
  blog_Quote_doesnotcontain?: Maybe<Scalars['String']>;
  blog_Quote_doesnotendwith?: Maybe<Scalars['String']>;
  blog_Quote_doesnotstartwith?: Maybe<Scalars['String']>;
  blog_Quote_endswith?: Maybe<Scalars['String']>;
  blog_Quote_eq?: Maybe<Scalars['String']>;
  blog_Quote_neq?: Maybe<Scalars['String']>;
  blog_Quote_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Quote_startswith?: Maybe<Scalars['String']>;
  blog_Title_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Title_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Title_contains?: Maybe<Scalars['String']>;
  blog_Title_doesnotcontain?: Maybe<Scalars['String']>;
  blog_Title_doesnotendwith?: Maybe<Scalars['String']>;
  blog_Title_doesnotstartwith?: Maybe<Scalars['String']>;
  blog_Title_endswith?: Maybe<Scalars['String']>;
  blog_Title_eq?: Maybe<Scalars['String']>;
  blog_Title_neq?: Maybe<Scalars['String']>;
  blog_Title_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  blog_Title_startswith?: Maybe<Scalars['String']>;
  campaignToContent?: Maybe<CampaignToContentPredicate>;
  channelAccountToContent?: Maybe<ChannelAccountToContentPredicate>;
  contentCollectionToContent?: Maybe<ContentCollectionToContentPredicate>;
  contentToContentAdaptation_Ancestors?: Maybe<Array<Scalars['ID']>>;
  contentToContentAdaptation_Parent?: Maybe<ContentToContentAdaptationPredicate>;
  contentToContentDraft_Ancestors?: Maybe<Array<Scalars['ID']>>;
  contentToContentDraft_Parent?: Maybe<ContentToContentDraftPredicate>;
  contentToContentLocalization_Ancestors?: Maybe<Array<Scalars['ID']>>;
  contentToContentLocalization_Parent?: Maybe<ContentToContentLocalizationPredicate>;
  contentToContentVariant_Ancestors?: Maybe<Array<Scalars['ID']>>;
  contentToContentVariant_Parent?: Maybe<ContentToContentVariantPredicate>;
  contentTypeToContent?: Maybe<ContentTypeToContentPredicate>;
  content_ApprovedForCreation_eq?: Maybe<Scalars['Boolean']>;
  content_ApprovedForCreation_neq?: Maybe<Scalars['Boolean']>;
  content_Brief_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Brief_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Brief_contains?: Maybe<Scalars['String']>;
  content_Brief_doesnotcontain?: Maybe<Scalars['String']>;
  content_Brief_doesnotendwith?: Maybe<Scalars['String']>;
  content_Brief_doesnotstartwith?: Maybe<Scalars['String']>;
  content_Brief_endswith?: Maybe<Scalars['String']>;
  content_Brief_eq?: Maybe<Scalars['String']>;
  content_Brief_neq?: Maybe<Scalars['String']>;
  content_Brief_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Brief_startswith?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_ContentCompletenessStatus_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_ContentCompletenessStatus_contains?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_doesnotcontain?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_doesnotendwith?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_doesnotstartwith?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_endswith?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_eq?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_neq?: Maybe<Scalars['String']>;
  content_ContentCompletenessStatus_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_ContentCompletenessStatus_startswith?: Maybe<Scalars['String']>;
  content_ContentStoryPoints_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  content_ContentStoryPoints_eq?: Maybe<Scalars['Long']>;
  content_ContentStoryPoints_gt?: Maybe<Scalars['Long']>;
  content_ContentStoryPoints_lt?: Maybe<Scalars['Long']>;
  content_ContentStoryPoints_neq?: Maybe<Scalars['Long']>;
  content_ExpirationDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  content_ExpirationDate_eq?: Maybe<Scalars['DateTime']>;
  content_ExpirationDate_gt?: Maybe<Scalars['DateTime']>;
  content_ExpirationDate_lt?: Maybe<Scalars['DateTime']>;
  content_ExpirationDate_neq?: Maybe<Scalars['DateTime']>;
  content_Impact_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  content_Impact_eq?: Maybe<Scalars['Long']>;
  content_Impact_gt?: Maybe<Scalars['Long']>;
  content_Impact_lt?: Maybe<Scalars['Long']>;
  content_Impact_neq?: Maybe<Scalars['Long']>;
  content_IsInIdeationState_eq?: Maybe<Scalars['Boolean']>;
  content_IsInIdeationState_neq?: Maybe<Scalars['Boolean']>;
  content_Name_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Name_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Name_contains?: Maybe<Scalars['String']>;
  content_Name_doesnotcontain?: Maybe<Scalars['String']>;
  content_Name_doesnotendwith?: Maybe<Scalars['String']>;
  content_Name_doesnotstartwith?: Maybe<Scalars['String']>;
  content_Name_endswith?: Maybe<Scalars['String']>;
  content_Name_eq?: Maybe<Scalars['String']>;
  content_Name_neq?: Maybe<Scalars['String']>;
  content_Name_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Name_startswith?: Maybe<Scalars['String']>;
  content_NumberOfCreatedVersions_between?: Maybe<Array<Maybe<Scalars['Long']>>>;
  content_NumberOfCreatedVersions_eq?: Maybe<Scalars['Long']>;
  content_NumberOfCreatedVersions_gt?: Maybe<Scalars['Long']>;
  content_NumberOfCreatedVersions_lt?: Maybe<Scalars['Long']>;
  content_NumberOfCreatedVersions_neq?: Maybe<Scalars['Long']>;
  content_PublicationDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  content_PublicationDate_eq?: Maybe<Scalars['DateTime']>;
  content_PublicationDate_gt?: Maybe<Scalars['DateTime']>;
  content_PublicationDate_lt?: Maybe<Scalars['DateTime']>;
  content_PublicationDate_neq?: Maybe<Scalars['DateTime']>;
  content_PublishedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  content_PublishedOn_eq?: Maybe<Scalars['DateTime']>;
  content_PublishedOn_gt?: Maybe<Scalars['DateTime']>;
  content_PublishedOn_lt?: Maybe<Scalars['DateTime']>;
  content_PublishedOn_neq?: Maybe<Scalars['DateTime']>;
  content_StrategyCompletenessStatus_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_StrategyCompletenessStatus_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_StrategyCompletenessStatus_contains?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_doesnotcontain?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_doesnotendwith?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_doesnotstartwith?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_endswith?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_eq?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_neq?: Maybe<Scalars['String']>;
  content_StrategyCompletenessStatus_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_StrategyCompletenessStatus_startswith?: Maybe<Scalars['String']>;
  content_Variant_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Variant_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Variant_contains?: Maybe<Scalars['String']>;
  content_Variant_doesnotcontain?: Maybe<Scalars['String']>;
  content_Variant_doesnotendwith?: Maybe<Scalars['String']>;
  content_Variant_doesnotstartwith?: Maybe<Scalars['String']>;
  content_Variant_endswith?: Maybe<Scalars['String']>;
  content_Variant_eq?: Maybe<Scalars['String']>;
  content_Variant_neq?: Maybe<Scalars['String']>;
  content_Variant_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_Variant_startswith?: Maybe<Scalars['String']>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  email_Body_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Body_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Body_contains?: Maybe<Scalars['String']>;
  email_Body_doesnotcontain?: Maybe<Scalars['String']>;
  email_Body_doesnotendwith?: Maybe<Scalars['String']>;
  email_Body_doesnotstartwith?: Maybe<Scalars['String']>;
  email_Body_endswith?: Maybe<Scalars['String']>;
  email_Body_eq?: Maybe<Scalars['String']>;
  email_Body_neq?: Maybe<Scalars['String']>;
  email_Body_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Body_startswith?: Maybe<Scalars['String']>;
  email_Recipients_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Recipients_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Recipients_contains?: Maybe<Scalars['String']>;
  email_Recipients_doesnotcontain?: Maybe<Scalars['String']>;
  email_Recipients_doesnotendwith?: Maybe<Scalars['String']>;
  email_Recipients_doesnotstartwith?: Maybe<Scalars['String']>;
  email_Recipients_endswith?: Maybe<Scalars['String']>;
  email_Recipients_eq?: Maybe<Scalars['String']>;
  email_Recipients_neq?: Maybe<Scalars['String']>;
  email_Recipients_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Recipients_startswith?: Maybe<Scalars['String']>;
  email_Sender_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Sender_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Sender_contains?: Maybe<Scalars['String']>;
  email_Sender_doesnotcontain?: Maybe<Scalars['String']>;
  email_Sender_doesnotendwith?: Maybe<Scalars['String']>;
  email_Sender_doesnotstartwith?: Maybe<Scalars['String']>;
  email_Sender_endswith?: Maybe<Scalars['String']>;
  email_Sender_eq?: Maybe<Scalars['String']>;
  email_Sender_neq?: Maybe<Scalars['String']>;
  email_Sender_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Sender_startswith?: Maybe<Scalars['String']>;
  email_Subject_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Subject_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Subject_contains?: Maybe<Scalars['String']>;
  email_Subject_doesnotcontain?: Maybe<Scalars['String']>;
  email_Subject_doesnotendwith?: Maybe<Scalars['String']>;
  email_Subject_doesnotstartwith?: Maybe<Scalars['String']>;
  email_Subject_endswith?: Maybe<Scalars['String']>;
  email_Subject_eq?: Maybe<Scalars['String']>;
  email_Subject_neq?: Maybe<Scalars['String']>;
  email_Subject_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_Subject_startswith?: Maybe<Scalars['String']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  localizationToContent?: Maybe<LocalizationToContentPredicate>;
  m_Content_IsDraft_eq?: Maybe<Scalars['Boolean']>;
  m_Content_IsDraft_neq?: Maybe<Scalars['Boolean']>;
  m_Content_IsVariant_eq?: Maybe<Scalars['Boolean']>;
  m_Content_IsVariant_neq?: Maybe<Scalars['Boolean']>;
  masterAssetIsContent_eq?: Maybe<Scalars['Boolean']>;
  masterAssetIsContent_neq?: Maybe<Scalars['Boolean']>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  pCMProductToContent?: Maybe<PcmProductToContentPredicate>;
  recipe_Cookinginstructions_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Cookinginstructions_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Cookinginstructions_contains?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_doesnotcontain?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_doesnotendwith?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_doesnotstartwith?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_endswith?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_eq?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_neq?: Maybe<Scalars['String']>;
  recipe_Cookinginstructions_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Cookinginstructions_startswith?: Maybe<Scalars['String']>;
  recipe_Ingredients_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Ingredients_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Ingredients_contains?: Maybe<Scalars['String']>;
  recipe_Ingredients_doesnotcontain?: Maybe<Scalars['String']>;
  recipe_Ingredients_doesnotendwith?: Maybe<Scalars['String']>;
  recipe_Ingredients_doesnotstartwith?: Maybe<Scalars['String']>;
  recipe_Ingredients_endswith?: Maybe<Scalars['String']>;
  recipe_Ingredients_eq?: Maybe<Scalars['String']>;
  recipe_Ingredients_neq?: Maybe<Scalars['String']>;
  recipe_Ingredients_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Ingredients_startswith?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Nutritionalfacts_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Nutritionalfacts_contains?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_doesnotcontain?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_doesnotendwith?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_doesnotstartwith?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_endswith?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_eq?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_neq?: Maybe<Scalars['String']>;
  recipe_Nutritionalfacts_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Nutritionalfacts_startswith?: Maybe<Scalars['String']>;
  recipe_Title_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Title_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Title_contains?: Maybe<Scalars['String']>;
  recipe_Title_doesnotcontain?: Maybe<Scalars['String']>;
  recipe_Title_doesnotendwith?: Maybe<Scalars['String']>;
  recipe_Title_doesnotstartwith?: Maybe<Scalars['String']>;
  recipe_Title_endswith?: Maybe<Scalars['String']>;
  recipe_Title_eq?: Maybe<Scalars['String']>;
  recipe_Title_neq?: Maybe<Scalars['String']>;
  recipe_Title_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipe_Title_startswith?: Maybe<Scalars['String']>;
  regionToContent?: Maybe<RegionToContentPredicate>;
  socialMediaMessage_Body_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  socialMediaMessage_Body_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  socialMediaMessage_Body_contains?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_doesnotcontain?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_doesnotendwith?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_doesnotstartwith?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_endswith?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_eq?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_neq?: Maybe<Scalars['String']>;
  socialMediaMessage_Body_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  socialMediaMessage_Body_startswith?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  socialMediaMessage_Footer_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  socialMediaMessage_Footer_contains?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_doesnotcontain?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_doesnotendwith?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_doesnotstartwith?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_endswith?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_eq?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_neq?: Maybe<Scalars['String']>;
  socialMediaMessage_Footer_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  socialMediaMessage_Footer_startswith?: Maybe<Scalars['String']>;
  webinar_Description_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  webinar_Description_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  webinar_Description_contains?: Maybe<Scalars['String']>;
  webinar_Description_doesnotcontain?: Maybe<Scalars['String']>;
  webinar_Description_doesnotendwith?: Maybe<Scalars['String']>;
  webinar_Description_doesnotstartwith?: Maybe<Scalars['String']>;
  webinar_Description_endswith?: Maybe<Scalars['String']>;
  webinar_Description_eq?: Maybe<Scalars['String']>;
  webinar_Description_neq?: Maybe<Scalars['String']>;
  webinar_Description_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  webinar_Description_startswith?: Maybe<Scalars['String']>;
  webinar_Title_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  webinar_Title_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  webinar_Title_contains?: Maybe<Scalars['String']>;
  webinar_Title_doesnotcontain?: Maybe<Scalars['String']>;
  webinar_Title_doesnotendwith?: Maybe<Scalars['String']>;
  webinar_Title_doesnotstartwith?: Maybe<Scalars['String']>;
  webinar_Title_endswith?: Maybe<Scalars['String']>;
  webinar_Title_eq?: Maybe<Scalars['String']>;
  webinar_Title_neq?: Maybe<Scalars['String']>;
  webinar_Title_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  webinar_Title_startswith?: Maybe<Scalars['String']>;
  whitePaper_Body_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Body_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Body_contains?: Maybe<Scalars['String']>;
  whitePaper_Body_doesnotcontain?: Maybe<Scalars['String']>;
  whitePaper_Body_doesnotendwith?: Maybe<Scalars['String']>;
  whitePaper_Body_doesnotstartwith?: Maybe<Scalars['String']>;
  whitePaper_Body_endswith?: Maybe<Scalars['String']>;
  whitePaper_Body_eq?: Maybe<Scalars['String']>;
  whitePaper_Body_neq?: Maybe<Scalars['String']>;
  whitePaper_Body_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Body_startswith?: Maybe<Scalars['String']>;
  whitePaper_Footer_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Footer_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Footer_contains?: Maybe<Scalars['String']>;
  whitePaper_Footer_doesnotcontain?: Maybe<Scalars['String']>;
  whitePaper_Footer_doesnotendwith?: Maybe<Scalars['String']>;
  whitePaper_Footer_doesnotstartwith?: Maybe<Scalars['String']>;
  whitePaper_Footer_endswith?: Maybe<Scalars['String']>;
  whitePaper_Footer_eq?: Maybe<Scalars['String']>;
  whitePaper_Footer_neq?: Maybe<Scalars['String']>;
  whitePaper_Footer_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Footer_startswith?: Maybe<Scalars['String']>;
  whitePaper_Header_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Header_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Header_contains?: Maybe<Scalars['String']>;
  whitePaper_Header_doesnotcontain?: Maybe<Scalars['String']>;
  whitePaper_Header_doesnotendwith?: Maybe<Scalars['String']>;
  whitePaper_Header_doesnotstartwith?: Maybe<Scalars['String']>;
  whitePaper_Header_endswith?: Maybe<Scalars['String']>;
  whitePaper_Header_eq?: Maybe<Scalars['String']>;
  whitePaper_Header_neq?: Maybe<Scalars['String']>;
  whitePaper_Header_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Header_startswith?: Maybe<Scalars['String']>;
  whitePaper_Title_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Title_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Title_contains?: Maybe<Scalars['String']>;
  whitePaper_Title_doesnotcontain?: Maybe<Scalars['String']>;
  whitePaper_Title_doesnotendwith?: Maybe<Scalars['String']>;
  whitePaper_Title_doesnotstartwith?: Maybe<Scalars['String']>;
  whitePaper_Title_endswith?: Maybe<Scalars['String']>;
  whitePaper_Title_eq?: Maybe<Scalars['String']>;
  whitePaper_Title_neq?: Maybe<Scalars['String']>;
  whitePaper_Title_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  whitePaper_Title_startswith?: Maybe<Scalars['String']>;
};
export declare enum M_ContentSorts {
  AdvertisementBodyAsc = "ADVERTISEMENT_BODY_ASC",
  AdvertisementBodyDesc = "ADVERTISEMENT_BODY_DESC",
  AdvertisementTitleAsc = "ADVERTISEMENT_TITLE_ASC",
  AdvertisementTitleDesc = "ADVERTISEMENT_TITLE_DESC",
  BlogBodyAsc = "BLOG_BODY_ASC",
  BlogBodyDesc = "BLOG_BODY_DESC",
  BlogQuoteAsc = "BLOG_QUOTE_ASC",
  BlogQuoteDesc = "BLOG_QUOTE_DESC",
  BlogTitleAsc = "BLOG_TITLE_ASC",
  BlogTitleDesc = "BLOG_TITLE_DESC",
  ContentApprovedforcreationAsc = "CONTENT_APPROVEDFORCREATION_ASC",
  ContentApprovedforcreationDesc = "CONTENT_APPROVEDFORCREATION_DESC",
  ContentBriefAsc = "CONTENT_BRIEF_ASC",
  ContentBriefDesc = "CONTENT_BRIEF_DESC",
  ContentContentcompletenessstatusAsc = "CONTENT_CONTENTCOMPLETENESSSTATUS_ASC",
  ContentContentcompletenessstatusDesc = "CONTENT_CONTENTCOMPLETENESSSTATUS_DESC",
  ContentContentstorypointsAsc = "CONTENT_CONTENTSTORYPOINTS_ASC",
  ContentContentstorypointsDesc = "CONTENT_CONTENTSTORYPOINTS_DESC",
  ContentExpirationdateAsc = "CONTENT_EXPIRATIONDATE_ASC",
  ContentExpirationdateDesc = "CONTENT_EXPIRATIONDATE_DESC",
  ContentImpactAsc = "CONTENT_IMPACT_ASC",
  ContentImpactDesc = "CONTENT_IMPACT_DESC",
  ContentIsinideationstateAsc = "CONTENT_ISINIDEATIONSTATE_ASC",
  ContentIsinideationstateDesc = "CONTENT_ISINIDEATIONSTATE_DESC",
  ContentNameAsc = "CONTENT_NAME_ASC",
  ContentNameDesc = "CONTENT_NAME_DESC",
  ContentNumberofcreatedversionsAsc = "CONTENT_NUMBEROFCREATEDVERSIONS_ASC",
  ContentNumberofcreatedversionsDesc = "CONTENT_NUMBEROFCREATEDVERSIONS_DESC",
  ContentPublicationdateAsc = "CONTENT_PUBLICATIONDATE_ASC",
  ContentPublicationdateDesc = "CONTENT_PUBLICATIONDATE_DESC",
  ContentPublishedonAsc = "CONTENT_PUBLISHEDON_ASC",
  ContentPublishedonDesc = "CONTENT_PUBLISHEDON_DESC",
  ContentStrategycompletenessstatusAsc = "CONTENT_STRATEGYCOMPLETENESSSTATUS_ASC",
  ContentStrategycompletenessstatusDesc = "CONTENT_STRATEGYCOMPLETENESSSTATUS_DESC",
  ContentVariantAsc = "CONTENT_VARIANT_ASC",
  ContentVariantDesc = "CONTENT_VARIANT_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EmailBodyAsc = "EMAIL_BODY_ASC",
  EmailBodyDesc = "EMAIL_BODY_DESC",
  EmailRecipientsAsc = "EMAIL_RECIPIENTS_ASC",
  EmailRecipientsDesc = "EMAIL_RECIPIENTS_DESC",
  EmailSenderAsc = "EMAIL_SENDER_ASC",
  EmailSenderDesc = "EMAIL_SENDER_DESC",
  EmailSubjectAsc = "EMAIL_SUBJECT_ASC",
  EmailSubjectDesc = "EMAIL_SUBJECT_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  MasterassetiscontentAsc = "MASTERASSETISCONTENT_ASC",
  MasterassetiscontentDesc = "MASTERASSETISCONTENT_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  MContentIsdraftAsc = "M_CONTENT_ISDRAFT_ASC",
  MContentIsdraftDesc = "M_CONTENT_ISDRAFT_DESC",
  MContentIsvariantAsc = "M_CONTENT_ISVARIANT_ASC",
  MContentIsvariantDesc = "M_CONTENT_ISVARIANT_DESC",
  RecipeCookinginstructionsAsc = "RECIPE_COOKINGINSTRUCTIONS_ASC",
  RecipeCookinginstructionsDesc = "RECIPE_COOKINGINSTRUCTIONS_DESC",
  RecipeIngredientsAsc = "RECIPE_INGREDIENTS_ASC",
  RecipeIngredientsDesc = "RECIPE_INGREDIENTS_DESC",
  RecipeNutritionalfactsAsc = "RECIPE_NUTRITIONALFACTS_ASC",
  RecipeNutritionalfactsDesc = "RECIPE_NUTRITIONALFACTS_DESC",
  RecipeTitleAsc = "RECIPE_TITLE_ASC",
  RecipeTitleDesc = "RECIPE_TITLE_DESC",
  RenditionsAsc = "RENDITIONS_ASC",
  RenditionsDesc = "RENDITIONS_DESC",
  SocialmediamessageBodyAsc = "SOCIALMEDIAMESSAGE_BODY_ASC",
  SocialmediamessageBodyDesc = "SOCIALMEDIAMESSAGE_BODY_DESC",
  SocialmediamessageFooterAsc = "SOCIALMEDIAMESSAGE_FOOTER_ASC",
  SocialmediamessageFooterDesc = "SOCIALMEDIAMESSAGE_FOOTER_DESC",
  WebinarDescriptionAsc = "WEBINAR_DESCRIPTION_ASC",
  WebinarDescriptionDesc = "WEBINAR_DESCRIPTION_DESC",
  WebinarTitleAsc = "WEBINAR_TITLE_ASC",
  WebinarTitleDesc = "WEBINAR_TITLE_DESC",
  WhitepaperBodyAsc = "WHITEPAPER_BODY_ASC",
  WhitepaperBodyDesc = "WHITEPAPER_BODY_DESC",
  WhitepaperFooterAsc = "WHITEPAPER_FOOTER_ASC",
  WhitepaperFooterDesc = "WHITEPAPER_FOOTER_DESC",
  WhitepaperHeaderAsc = "WHITEPAPER_HEADER_ASC",
  WhitepaperHeaderDesc = "WHITEPAPER_HEADER_DESC",
  WhitepaperTitleAsc = "WHITEPAPER_TITLE_ASC",
  WhitepaperTitleDesc = "WHITEPAPER_TITLE_DESC",
}
/** M.ContentType */
export declare type M_ContentType = {
  __typename?: 'M_ContentType';
  /** ContentTypeToContent (parent to child traversal) */
  contentTypeToContent: M_ContentList;
  /** ContentType.Label */
  contentType_Label?: Maybe<Scalars['Json']>;
  /** ContentType.Prefix */
  contentType_Prefix?: Maybe<Scalars['String']>;
  /** ContentType.RuleSet */
  contentType_RuleSet?: Maybe<Scalars['Json']>;
  /** ContentType.Validation */
  contentType_Validation?: Maybe<Scalars['Json']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.ContentType */
export declare type M_ContentTypeContentTypeToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type M_ContentTypeList = {
  __typename?: 'M_ContentTypeList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_ContentType>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_ContentTypeSorts {
  ContenttypeLabelAsc = "CONTENTTYPE_LABEL_ASC",
  ContenttypeLabelDesc = "CONTENTTYPE_LABEL_DESC",
  ContenttypePrefixAsc = "CONTENTTYPE_PREFIX_ASC",
  ContenttypePrefixDesc = "CONTENTTYPE_PREFIX_DESC",
  ContenttypeRulesetAsc = "CONTENTTYPE_RULESET_ASC",
  ContenttypeRulesetDesc = "CONTENTTYPE_RULESET_DESC",
  ContenttypeValidationAsc = "CONTENTTYPE_VALIDATION_ASC",
  ContenttypeValidationDesc = "CONTENTTYPE_VALIDATION_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_ContentType_T_Predicate = {
  AND?: Maybe<Array<M_ContentType_T_Predicate>>;
  OR?: Maybe<Array<M_ContentType_T_Predicate>>;
  contentType_Prefix_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_Prefix_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_Prefix_contains?: Maybe<Scalars['String']>;
  contentType_Prefix_doesnotcontain?: Maybe<Scalars['String']>;
  contentType_Prefix_doesnotendwith?: Maybe<Scalars['String']>;
  contentType_Prefix_doesnotstartwith?: Maybe<Scalars['String']>;
  contentType_Prefix_endswith?: Maybe<Scalars['String']>;
  contentType_Prefix_eq?: Maybe<Scalars['String']>;
  contentType_Prefix_neq?: Maybe<Scalars['String']>;
  contentType_Prefix_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_Prefix_startswith?: Maybe<Scalars['String']>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.Content */
export declare type M_Content_Advertisement = Im_Content & Im_Content_Advertisement & {
  __typename?: 'M_Content_Advertisement';
  /** Enter advertisement body text here */
  advertisement_Body?: Maybe<Scalars['String']>;
  /** Enter advertisement title here */
  advertisement_Title?: Maybe<Scalars['String']>;
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
};
/** M.Content */
export declare type M_Content_AdvertisementAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_AdvertisementPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_AdvertisementList = {
  __typename?: 'M_Content_AdvertisementList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_Advertisement>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Content */
export declare type M_Content_Blog = Im_Content & Im_Content_Blog & {
  __typename?: 'M_Content_Blog';
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** Edit blog body text here */
  blog_Body?: Maybe<Scalars['String']>;
  /** Add a quote here */
  blog_Quote?: Maybe<Scalars['String']>;
  /** Edit blog title here */
  blog_Title?: Maybe<Scalars['String']>;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
};
/** M.Content */
export declare type M_Content_BlogAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_BlogCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_BlogChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_BlogCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_BlogCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_BlogCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_BlogContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_BlogContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_BlogContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_BlogContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_BlogPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_BlogList = {
  __typename?: 'M_Content_BlogList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_Blog>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Content */
export declare type M_Content_Email = Im_Content & Im_Content_Email & {
  __typename?: 'M_Content_Email';
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Edit email body text here */
  email_Body?: Maybe<Scalars['String']>;
  /** Edit recipients here, separated by ; */
  email_Recipients?: Maybe<Scalars['String']>;
  /** Edit sender here */
  email_Sender?: Maybe<Scalars['String']>;
  /** Edit email subject here */
  email_Subject?: Maybe<Scalars['String']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
};
/** M.Content */
export declare type M_Content_EmailAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_EmailCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_EmailChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_EmailCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_EmailCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_EmailCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_EmailContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_EmailContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_EmailContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_EmailContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_EmailPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_EmailList = {
  __typename?: 'M_Content_EmailList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_Email>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Content */
export declare type M_Content_Recipe = Im_Content & Im_Content_Recipe & {
  __typename?: 'M_Content_Recipe';
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** Edit cooking instructions here */
  recipe_Cookinginstructions?: Maybe<Scalars['String']>;
  /** List the ingredients */
  recipe_Ingredients?: Maybe<Scalars['String']>;
  /** Add some nutritional facts */
  recipe_Nutritionalfacts?: Maybe<Scalars['String']>;
  /** Edit title here */
  recipe_Title?: Maybe<Scalars['String']>;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
};
/** M.Content */
export declare type M_Content_RecipeAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_RecipeCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_RecipeChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_RecipeCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_RecipeCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_RecipeCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_RecipeContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_RecipeContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_RecipeContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_RecipeContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_RecipePCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_RecipeList = {
  __typename?: 'M_Content_RecipeList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_Recipe>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessage = Im_Content & Im_Content_SocialMediaMessage & {
  __typename?: 'M_Content_SocialMediaMessage';
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
  /** Edit social media message body here */
  socialMediaMessage_Body?: Maybe<Scalars['String']>;
  /** Add tags here */
  socialMediaMessage_Footer?: Maybe<Scalars['String']>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessageContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_SocialMediaMessagePCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_SocialMediaMessageList = {
  __typename?: 'M_Content_SocialMediaMessageList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_SocialMediaMessage>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Content */
export declare type M_Content_Webinar = Im_Content & Im_Content_Webinar & {
  __typename?: 'M_Content_Webinar';
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
  /** Edit webinar description text here */
  webinar_Description?: Maybe<Scalars['String']>;
  /** Edit title here */
  webinar_Title?: Maybe<Scalars['String']>;
};
/** M.Content */
export declare type M_Content_WebinarAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WebinarCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WebinarChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WebinarCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_WebinarCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_WebinarCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_WebinarContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WebinarContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_WebinarContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_WebinarContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_WebinarPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_WebinarList = {
  __typename?: 'M_Content_WebinarList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_Webinar>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Content */
export declare type M_Content_WhitePaper = Im_Content & Im_Content_WhitePaper & {
  __typename?: 'M_Content_WhitePaper';
  /** AudienceToContent (child to parent traversal) */
  audienceToContent: M_Cmp_AudienceList;
  /** CampaignToContent (child to parent traversal) */
  campaignToContent: M_Cmp_CampaignList;
  /** ChannelAccountToContent (child to parent traversal) */
  channelAccountToContent: M_ChannelAccountList;
  /** CmpContentToBriefAsset (parent to child traversal) */
  cmpContentToBriefAsset: M_AssetList;
  /** CmpContentToLinkedAsset (parent to child traversal) */
  cmpContentToLinkedAsset: M_AssetList;
  /** CmpContentToMasterLinkedAsset (parent to child traversal) */
  cmpContentToMasterLinkedAsset: M_AssetList;
  /** ContentCollectionToContent (child to parent traversal) */
  contentCollectionToContent: M_ContentCollectionList;
  /** ContentToContentAdaptation (parent to child traversal) */
  contentToContentAdaptation_Children: M_ContentList;
  /** ContentToContentAdaptation (child to parent traversal) */
  contentToContentAdaptation_Parent?: Maybe<M_Content>;
  /** ContentToContentDraft (parent to child traversal) */
  contentToContentDraft_Child?: Maybe<M_Content>;
  /** ContentToContentDraft (child to parent traversal) */
  contentToContentDraft_Parent?: Maybe<M_Content>;
  /** ContentToContentLocalization (parent to child traversal) */
  contentToContentLocalization_Children: M_ContentList;
  /** ContentToContentLocalization (child to parent traversal) */
  contentToContentLocalization_Parent?: Maybe<M_Content>;
  /** ContentToContentVariant (parent to child traversal) */
  contentToContentVariant_Children: M_ContentList;
  /** ContentToContentVariant (child to parent traversal) */
  contentToContentVariant_Parent?: Maybe<M_Content>;
  /** ContentTypeToContent (child to parent traversal) */
  contentTypeToContent?: Maybe<M_ContentType>;
  /** Content.ApprovedForCreation */
  content_ApprovedForCreation?: Maybe<Scalars['Boolean']>;
  /** Content.Brief */
  content_Brief?: Maybe<Scalars['String']>;
  /** Content.ContentCompletenessStatus */
  content_ContentCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.ContentStoryPoints */
  content_ContentStoryPoints?: Maybe<Scalars['Long']>;
  /** Content.ExpirationDate */
  content_ExpirationDate?: Maybe<Scalars['DateTime']>;
  /** Content.Impact */
  content_Impact?: Maybe<Scalars['Long']>;
  /** Content.IsInIdeationState */
  content_IsInIdeationState?: Maybe<Scalars['Boolean']>;
  /** Content.Name */
  content_Name?: Maybe<Scalars['String']>;
  /** Content.NumberOfCreatedVersions */
  content_NumberOfCreatedVersions?: Maybe<Scalars['Long']>;
  /** Content.PublicationDate */
  content_PublicationDate?: Maybe<Scalars['DateTime']>;
  /** Content.PublishedOn */
  content_PublishedOn?: Maybe<Scalars['DateTime']>;
  /** Content.StrategyCompletenessStatus */
  content_StrategyCompletenessStatus?: Maybe<Scalars['String']>;
  /** Content.Variant */
  content_Variant?: Maybe<Scalars['String']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToContent (child to parent traversal) */
  localizationToContent?: Maybe<M_Localization>;
  /** M.Content.IsDraft */
  m_Content_IsDraft?: Maybe<Scalars['Boolean']>;
  /** M.Content.IsVariant */
  m_Content_IsVariant?: Maybe<Scalars['Boolean']>;
  /** MasterAssetIsContent */
  masterAssetIsContent?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductToContent (child to parent traversal) */
  pCMProductToContent: M_Pcm_ProductList;
  /** RegionToContent (child to parent traversal) */
  regionToContent?: Maybe<M_Cmp_Region>;
  /** Renditions */
  renditions?: Maybe<Scalars['Json']>;
  /** Edit white paper body text here */
  whitePaper_Body?: Maybe<Scalars['String']>;
  /** Edit white paper footer text here */
  whitePaper_Footer?: Maybe<Scalars['String']>;
  /** Edit white paper header text here */
  whitePaper_Header?: Maybe<Scalars['String']>;
  /** Edit title here */
  whitePaper_Title?: Maybe<Scalars['String']>;
};
/** M.Content */
export declare type M_Content_WhitePaperAudienceToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperCampaignToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperChannelAccountToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperCmpContentToBriefAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperCmpContentToLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperCmpContentToMasterLinkedAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperContentCollectionToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperContentToContentAdaptation_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperContentToContentLocalization_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperContentToContentVariant_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.Content */
export declare type M_Content_WhitePaperPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type M_Content_WhitePaperList = {
  __typename?: 'M_Content_WhitePaperList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Content_WhitePaper>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
/** M.Localization */
export declare type M_Localization = {
  __typename?: 'M_Localization';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** DisplayName */
  displayName?: Maybe<Scalars['Json']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** LocalizationToAsset (parent to child traversal) */
  localizationToAsset: M_AssetList;
  /** LocalizationToCampaign (parent to child traversal) */
  localizationToCampaign: M_Cmp_CampaignList;
  /** LocalizationToContent (parent to child traversal) */
  localizationToContent: M_ContentList;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
  /** ValueName */
  valueName?: Maybe<Scalars['String']>;
};
/** M.Localization */
export declare type M_LocalizationLocalizationToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.Localization */
export declare type M_LocalizationLocalizationToCampaignArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
/** M.Localization */
export declare type M_LocalizationLocalizationToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type M_LocalizationList = {
  __typename?: 'M_LocalizationList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Localization>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_LocalizationSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  DisplaynameAsc = "DISPLAYNAME_ASC",
  DisplaynameDesc = "DISPLAYNAME_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
  ValuenameAsc = "VALUENAME_ASC",
  ValuenameDesc = "VALUENAME_DESC",
}
export declare type M_Localization_T_Predicate = {
  AND?: Maybe<Array<M_Localization_T_Predicate>>;
  OR?: Maybe<Array<M_Localization_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
  valueName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  valueName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  valueName_contains?: Maybe<Scalars['String']>;
  valueName_doesnotcontain?: Maybe<Scalars['String']>;
  valueName_doesnotendwith?: Maybe<Scalars['String']>;
  valueName_doesnotstartwith?: Maybe<Scalars['String']>;
  valueName_endswith?: Maybe<Scalars['String']>;
  valueName_eq?: Maybe<Scalars['String']>;
  valueName_neq?: Maybe<Scalars['String']>;
  valueName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  valueName_startswith?: Maybe<Scalars['String']>;
};
/** M.PCM.Market */
export declare type M_Pcm_Market = {
  __typename?: 'M_PCM_Market';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** MarketDescription */
  marketDescription?: Maybe<Scalars['Json']>;
  /** MarketLabel */
  marketLabel?: Maybe<Scalars['Json']>;
  /** MarketName */
  marketName?: Maybe<Scalars['String']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMMarketToSelf (parent to child traversal) */
  pCMMarketToSelf_Children: M_Pcm_MarketList;
  /** PCMMarketToSelf (child to parent traversal) */
  pCMMarketToSelf_Parent?: Maybe<M_Pcm_Market>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
};
/** M.PCM.Market */
export declare type M_Pcm_MarketPCmMarketToSelf_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_MarketSorts>>>;
  where?: Maybe<M_Pcm_Market_T_Predicate>;
};
export declare type M_Pcm_MarketList = {
  __typename?: 'M_PCM_MarketList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Pcm_Market>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_Pcm_MarketSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  MarketdescriptionAsc = "MARKETDESCRIPTION_ASC",
  MarketdescriptionDesc = "MARKETDESCRIPTION_DESC",
  MarketlabelAsc = "MARKETLABEL_ASC",
  MarketlabelDesc = "MARKETLABEL_DESC",
  MarketnameAsc = "MARKETNAME_ASC",
  MarketnameDesc = "MARKETNAME_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
}
export declare type M_Pcm_Market_T_Predicate = {
  AND?: Maybe<Array<M_Pcm_Market_T_Predicate>>;
  OR?: Maybe<Array<M_Pcm_Market_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  marketName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  marketName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  marketName_contains?: Maybe<Scalars['String']>;
  marketName_doesnotcontain?: Maybe<Scalars['String']>;
  marketName_doesnotendwith?: Maybe<Scalars['String']>;
  marketName_doesnotstartwith?: Maybe<Scalars['String']>;
  marketName_endswith?: Maybe<Scalars['String']>;
  marketName_eq?: Maybe<Scalars['String']>;
  marketName_neq?: Maybe<Scalars['String']>;
  marketName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  marketName_startswith?: Maybe<Scalars['String']>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  pCMMarketToSelf_Ancestors?: Maybe<Array<Scalars['ID']>>;
  pCMMarketToSelf_Parent?: Maybe<PcmMarketToSelfPredicate>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
};
/** M.PCM.Product */
export declare type M_Pcm_Product = {
  __typename?: 'M_PCM_Product';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMPriceToProduct */
  pCMPriceToProduct?: Maybe<Scalars['Decimal']>;
  /** PCMProductToAsset (parent to child traversal) */
  pCMProductToAsset: M_AssetList;
  /** PCMProductToContent (parent to child traversal) */
  pCMProductToContent: M_ContentList;
  /** PCMProductToMasterAsset (parent to child traversal) */
  pCMProductToMasterAsset: M_AssetList;
  /** PCMProductToProductVergoedingen (parent to child traversal) */
  pCMProductToProductVergoedingen_Children: M_Pcm_ProductList;
  /** PCMProductToProductVergoedingen (child to parent traversal) */
  pCMProductToProductVergoedingen_Parents: M_Pcm_ProductList;
  /** ProductLabel */
  productLabel?: Maybe<Scalars['Json']>;
  /** ProductLongDescription */
  productLongDescription?: Maybe<Scalars['Json']>;
  /** ProductLongDescriptionMultiLine */
  productLongDescriptionMultiLine?: Maybe<Scalars['String']>;
  /** ProductName */
  productName?: Maybe<Scalars['String']>;
  /** productNonReimbursement */
  productNonReimbursement?: Maybe<Scalars['Json']>;
  /** ProductNumber */
  productNumber?: Maybe<Scalars['String']>;
  /** productReimbursement */
  productReimbursement?: Maybe<Scalars['Json']>;
  /** ProductShortDescription */
  productShortDescription?: Maybe<Scalars['Json']>;
  /** productUsp1 */
  productUsp1?: Maybe<Scalars['Json']>;
  /** productUsp2 */
  productUsp2?: Maybe<Scalars['String']>;
  /** YearToPCMProduct (child to parent traversal) */
  yearToPCMProduct?: Maybe<C_Year>;
};
/** M.PCM.Product */
export declare type M_Pcm_ProductPCmProductToAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.PCM.Product */
export declare type M_Pcm_ProductPCmProductToContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
/** M.PCM.Product */
export declare type M_Pcm_ProductPCmProductToMasterAssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
/** M.PCM.Product */
export declare type M_Pcm_ProductPCmProductToProductVergoedingen_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
/** M.PCM.Product */
export declare type M_Pcm_ProductPCmProductToProductVergoedingen_ParentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
/** M.PCM.ProductCategory */
export declare type M_Pcm_ProductCategory = {
  __typename?: 'M_PCM_ProductCategory';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** PCMProductCategoryToSelf (parent to child traversal) */
  pCMProductCategoryToSelf_Children: M_Pcm_ProductCategoryList;
  /** PCMProductCategoryToSelf (child to parent traversal) */
  pCMProductCategoryToSelf_Parent?: Maybe<M_Pcm_ProductCategory>;
  /** PreventPublish */
  preventPublish?: Maybe<Scalars['Boolean']>;
  /** ProductCategoryDescription */
  productCategoryDescription?: Maybe<Scalars['Json']>;
  /** ProductCategoryLabel */
  productCategoryLabel?: Maybe<Scalars['Json']>;
  /** ProductCategoryName */
  productCategoryName?: Maybe<Scalars['String']>;
};
/** M.PCM.ProductCategory */
export declare type M_Pcm_ProductCategoryPCmProductCategoryToSelf_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductCategorySorts>>>;
  where?: Maybe<M_Pcm_ProductCategory_T_Predicate>;
};
export declare type M_Pcm_ProductCategoryList = {
  __typename?: 'M_PCM_ProductCategoryList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Pcm_ProductCategory>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_Pcm_ProductCategorySorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PreventpublishAsc = "PREVENTPUBLISH_ASC",
  PreventpublishDesc = "PREVENTPUBLISH_DESC",
  ProductcategorydescriptionAsc = "PRODUCTCATEGORYDESCRIPTION_ASC",
  ProductcategorydescriptionDesc = "PRODUCTCATEGORYDESCRIPTION_DESC",
  ProductcategorylabelAsc = "PRODUCTCATEGORYLABEL_ASC",
  ProductcategorylabelDesc = "PRODUCTCATEGORYLABEL_DESC",
  ProductcategorynameAsc = "PRODUCTCATEGORYNAME_ASC",
  ProductcategorynameDesc = "PRODUCTCATEGORYNAME_DESC",
}
export declare type M_Pcm_ProductCategory_T_Predicate = {
  AND?: Maybe<Array<M_Pcm_ProductCategory_T_Predicate>>;
  OR?: Maybe<Array<M_Pcm_ProductCategory_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  pCMProductCategoryToSelf_Ancestors?: Maybe<Array<Scalars['ID']>>;
  pCMProductCategoryToSelf_Parent?: Maybe<PcmProductCategoryToSelfPredicate>;
  preventPublish_eq?: Maybe<Scalars['Boolean']>;
  preventPublish_neq?: Maybe<Scalars['Boolean']>;
  productCategoryName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productCategoryName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productCategoryName_contains?: Maybe<Scalars['String']>;
  productCategoryName_doesnotcontain?: Maybe<Scalars['String']>;
  productCategoryName_doesnotendwith?: Maybe<Scalars['String']>;
  productCategoryName_doesnotstartwith?: Maybe<Scalars['String']>;
  productCategoryName_endswith?: Maybe<Scalars['String']>;
  productCategoryName_eq?: Maybe<Scalars['String']>;
  productCategoryName_neq?: Maybe<Scalars['String']>;
  productCategoryName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productCategoryName_startswith?: Maybe<Scalars['String']>;
};
export declare type M_Pcm_ProductList = {
  __typename?: 'M_PCM_ProductList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_Pcm_Product>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare type M_Pcm_ProductPredicate = {
  AND?: Maybe<Array<M_Pcm_ProductPredicate>>;
  OR?: Maybe<Array<M_Pcm_ProductPredicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  pCMPriceToProduct_between?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  pCMPriceToProduct_eq?: Maybe<Scalars['Decimal']>;
  pCMPriceToProduct_gt?: Maybe<Scalars['Decimal']>;
  pCMPriceToProduct_lt?: Maybe<Scalars['Decimal']>;
  pCMPriceToProduct_neq?: Maybe<Scalars['Decimal']>;
  pCMProductToProductVergoedingen_Ancestors?: Maybe<Array<Scalars['ID']>>;
  pCMProductToProductVergoedingen_Parents?: Maybe<PcmProductToProductVergoedingenPredicate>;
  productLongDescriptionMultiLine_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productLongDescriptionMultiLine_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productLongDescriptionMultiLine_contains?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_doesnotcontain?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_doesnotendwith?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_doesnotstartwith?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_endswith?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_eq?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_neq?: Maybe<Scalars['String']>;
  productLongDescriptionMultiLine_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productLongDescriptionMultiLine_startswith?: Maybe<Scalars['String']>;
  productName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productName_contains?: Maybe<Scalars['String']>;
  productName_doesnotcontain?: Maybe<Scalars['String']>;
  productName_doesnotendwith?: Maybe<Scalars['String']>;
  productName_doesnotstartwith?: Maybe<Scalars['String']>;
  productName_endswith?: Maybe<Scalars['String']>;
  productName_eq?: Maybe<Scalars['String']>;
  productName_neq?: Maybe<Scalars['String']>;
  productName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productName_startswith?: Maybe<Scalars['String']>;
  productNumber_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productNumber_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productNumber_contains?: Maybe<Scalars['String']>;
  productNumber_doesnotcontain?: Maybe<Scalars['String']>;
  productNumber_doesnotendwith?: Maybe<Scalars['String']>;
  productNumber_doesnotstartwith?: Maybe<Scalars['String']>;
  productNumber_endswith?: Maybe<Scalars['String']>;
  productNumber_eq?: Maybe<Scalars['String']>;
  productNumber_neq?: Maybe<Scalars['String']>;
  productNumber_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productNumber_startswith?: Maybe<Scalars['String']>;
  productUsp2_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productUsp2_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productUsp2_contains?: Maybe<Scalars['String']>;
  productUsp2_doesnotcontain?: Maybe<Scalars['String']>;
  productUsp2_doesnotendwith?: Maybe<Scalars['String']>;
  productUsp2_doesnotstartwith?: Maybe<Scalars['String']>;
  productUsp2_endswith?: Maybe<Scalars['String']>;
  productUsp2_eq?: Maybe<Scalars['String']>;
  productUsp2_neq?: Maybe<Scalars['String']>;
  productUsp2_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  productUsp2_startswith?: Maybe<Scalars['String']>;
  yearToPCMProduct?: Maybe<YearToPcmProductPredicate>;
};
export declare enum M_Pcm_ProductSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  PcmpricetoproductAsc = "PCMPRICETOPRODUCT_ASC",
  PcmpricetoproductDesc = "PCMPRICETOPRODUCT_DESC",
  ProductlabelAsc = "PRODUCTLABEL_ASC",
  ProductlabelDesc = "PRODUCTLABEL_DESC",
  ProductlongdescriptionmultilineAsc = "PRODUCTLONGDESCRIPTIONMULTILINE_ASC",
  ProductlongdescriptionmultilineDesc = "PRODUCTLONGDESCRIPTIONMULTILINE_DESC",
  ProductlongdescriptionAsc = "PRODUCTLONGDESCRIPTION_ASC",
  ProductlongdescriptionDesc = "PRODUCTLONGDESCRIPTION_DESC",
  ProductnameAsc = "PRODUCTNAME_ASC",
  ProductnameDesc = "PRODUCTNAME_DESC",
  ProductnonreimbursementAsc = "PRODUCTNONREIMBURSEMENT_ASC",
  ProductnonreimbursementDesc = "PRODUCTNONREIMBURSEMENT_DESC",
  ProductnumberAsc = "PRODUCTNUMBER_ASC",
  ProductnumberDesc = "PRODUCTNUMBER_DESC",
  ProductreimbursementAsc = "PRODUCTREIMBURSEMENT_ASC",
  ProductreimbursementDesc = "PRODUCTREIMBURSEMENT_DESC",
  ProductshortdescriptionAsc = "PRODUCTSHORTDESCRIPTION_ASC",
  ProductshortdescriptionDesc = "PRODUCTSHORTDESCRIPTION_DESC",
  Productusp1Asc = "PRODUCTUSP1_ASC",
  Productusp1Desc = "PRODUCTUSP1_DESC",
  Productusp2Asc = "PRODUCTUSP2_ASC",
  Productusp2Desc = "PRODUCTUSP2_DESC",
}
/** M.PublicLink */
export declare type M_PublicLink = {
  __typename?: 'M_PublicLink';
  /** AssetToPublicLink (child to parent traversal) */
  assetToPublicLink: M_AssetList;
  /** ConversionConfiguration */
  conversionConfiguration?: Maybe<Scalars['Json']>;
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** ExpirationDate */
  expirationDate?: Maybe<Scalars['DateTime']>;
  /** FileKey */
  fileKey?: Maybe<Scalars['String']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** IsDisabled */
  isDisabled?: Maybe<Scalars['Boolean']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** Progress */
  progress?: Maybe<Scalars['String']>;
  /** RelativeUrl */
  relativeUrl?: Maybe<Scalars['String']>;
  /** Resource */
  resource?: Maybe<Scalars['String']>;
  /** ResourceType */
  resourceType?: Maybe<Scalars['String']>;
  /** Status */
  status?: Maybe<Scalars['String']>;
  /** VersionHash */
  versionHash?: Maybe<Scalars['String']>;
};
/** M.PublicLink */
export declare type M_PublicLinkAssetToPublicLinkArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type M_PublicLinkList = {
  __typename?: 'M_PublicLinkList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_PublicLink>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare type M_PublicLinkPredicate = {
  AND?: Maybe<Array<M_PublicLinkPredicate>>;
  OR?: Maybe<Array<M_PublicLinkPredicate>>;
  assetToPublicLink?: Maybe<AssetToPublicLinkPredicate>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  expirationDate_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  expirationDate_eq?: Maybe<Scalars['DateTime']>;
  expirationDate_gt?: Maybe<Scalars['DateTime']>;
  expirationDate_lt?: Maybe<Scalars['DateTime']>;
  expirationDate_neq?: Maybe<Scalars['DateTime']>;
  fileKey_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileKey_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileKey_contains?: Maybe<Scalars['String']>;
  fileKey_doesnotcontain?: Maybe<Scalars['String']>;
  fileKey_doesnotendwith?: Maybe<Scalars['String']>;
  fileKey_doesnotstartwith?: Maybe<Scalars['String']>;
  fileKey_endswith?: Maybe<Scalars['String']>;
  fileKey_eq?: Maybe<Scalars['String']>;
  fileKey_neq?: Maybe<Scalars['String']>;
  fileKey_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileKey_startswith?: Maybe<Scalars['String']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  isDisabled_eq?: Maybe<Scalars['Boolean']>;
  isDisabled_neq?: Maybe<Scalars['Boolean']>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  progress_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  progress_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  progress_contains?: Maybe<Scalars['String']>;
  progress_doesnotcontain?: Maybe<Scalars['String']>;
  progress_doesnotendwith?: Maybe<Scalars['String']>;
  progress_doesnotstartwith?: Maybe<Scalars['String']>;
  progress_endswith?: Maybe<Scalars['String']>;
  progress_eq?: Maybe<Scalars['String']>;
  progress_neq?: Maybe<Scalars['String']>;
  progress_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  progress_startswith?: Maybe<Scalars['String']>;
  relativeUrl_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  relativeUrl_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  relativeUrl_contains?: Maybe<Scalars['String']>;
  relativeUrl_doesnotcontain?: Maybe<Scalars['String']>;
  relativeUrl_doesnotendwith?: Maybe<Scalars['String']>;
  relativeUrl_doesnotstartwith?: Maybe<Scalars['String']>;
  relativeUrl_endswith?: Maybe<Scalars['String']>;
  relativeUrl_eq?: Maybe<Scalars['String']>;
  relativeUrl_neq?: Maybe<Scalars['String']>;
  relativeUrl_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  relativeUrl_startswith?: Maybe<Scalars['String']>;
  resourceType_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceType_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceType_contains?: Maybe<Scalars['String']>;
  resourceType_doesnotcontain?: Maybe<Scalars['String']>;
  resourceType_doesnotendwith?: Maybe<Scalars['String']>;
  resourceType_doesnotstartwith?: Maybe<Scalars['String']>;
  resourceType_endswith?: Maybe<Scalars['String']>;
  resourceType_eq?: Maybe<Scalars['String']>;
  resourceType_neq?: Maybe<Scalars['String']>;
  resourceType_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceType_startswith?: Maybe<Scalars['String']>;
  resource_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource_contains?: Maybe<Scalars['String']>;
  resource_doesnotcontain?: Maybe<Scalars['String']>;
  resource_doesnotendwith?: Maybe<Scalars['String']>;
  resource_doesnotstartwith?: Maybe<Scalars['String']>;
  resource_endswith?: Maybe<Scalars['String']>;
  resource_eq?: Maybe<Scalars['String']>;
  resource_neq?: Maybe<Scalars['String']>;
  resource_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource_startswith?: Maybe<Scalars['String']>;
  status_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_contains?: Maybe<Scalars['String']>;
  status_doesnotcontain?: Maybe<Scalars['String']>;
  status_doesnotendwith?: Maybe<Scalars['String']>;
  status_doesnotstartwith?: Maybe<Scalars['String']>;
  status_endswith?: Maybe<Scalars['String']>;
  status_eq?: Maybe<Scalars['String']>;
  status_neq?: Maybe<Scalars['String']>;
  status_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_startswith?: Maybe<Scalars['String']>;
  versionHash_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  versionHash_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  versionHash_contains?: Maybe<Scalars['String']>;
  versionHash_doesnotcontain?: Maybe<Scalars['String']>;
  versionHash_doesnotendwith?: Maybe<Scalars['String']>;
  versionHash_doesnotstartwith?: Maybe<Scalars['String']>;
  versionHash_endswith?: Maybe<Scalars['String']>;
  versionHash_eq?: Maybe<Scalars['String']>;
  versionHash_neq?: Maybe<Scalars['String']>;
  versionHash_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  versionHash_startswith?: Maybe<Scalars['String']>;
};
export declare enum M_PublicLinkSorts {
  ConversionconfigurationAsc = "CONVERSIONCONFIGURATION_ASC",
  ConversionconfigurationDesc = "CONVERSIONCONFIGURATION_DESC",
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  ExpirationdateAsc = "EXPIRATIONDATE_ASC",
  ExpirationdateDesc = "EXPIRATIONDATE_DESC",
  FilekeyAsc = "FILEKEY_ASC",
  FilekeyDesc = "FILEKEY_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  IsdisabledAsc = "ISDISABLED_ASC",
  IsdisabledDesc = "ISDISABLED_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  ProgressAsc = "PROGRESS_ASC",
  ProgressDesc = "PROGRESS_DESC",
  RelativeurlAsc = "RELATIVEURL_ASC",
  RelativeurlDesc = "RELATIVEURL_DESC",
  ResourcetypeAsc = "RESOURCETYPE_ASC",
  ResourcetypeDesc = "RESOURCETYPE_DESC",
  ResourceAsc = "RESOURCE_ASC",
  ResourceDesc = "RESOURCE_DESC",
  StatusAsc = "STATUS_ASC",
  StatusDesc = "STATUS_DESC",
  VersionhashAsc = "VERSIONHASH_ASC",
  VersionhashDesc = "VERSIONHASH_DESC",
}
/** M.WatermarkType */
export declare type M_WatermarkType = {
  __typename?: 'M_WatermarkType';
  /** CreatedBy */
  createdBy?: Maybe<Scalars['String']>;
  /** CreatedOn */
  createdOn?: Maybe<Scalars['DateTime']>;
  /** Entity.Visualization */
  entity_Visualization?: Maybe<Scalars['Json']>;
  /** Unique identifier */
  id?: Maybe<Scalars['ID']>;
  /** ModifiedBy */
  modifiedBy?: Maybe<Scalars['String']>;
  /** ModifiedOn */
  modifiedOn?: Maybe<Scalars['DateTime']>;
  /** TaxonomyDescription */
  taxonomyDescription?: Maybe<Scalars['Json']>;
  /** TaxonomyLabel */
  taxonomyLabel?: Maybe<Scalars['Json']>;
  /** TaxonomyName */
  taxonomyName?: Maybe<Scalars['String']>;
  /** TaxonomySynonyms */
  taxonomySynonyms?: Maybe<Scalars['Json']>;
  /** WatermarkTypeToSelf (parent to child traversal) */
  watermarkTypeToSelf_Children: M_WatermarkTypeList;
  /** WatermarkTypeToSelf (child to parent traversal) */
  watermarkTypeToSelf_Parent?: Maybe<M_WatermarkType>;
};
/** M.WatermarkType */
export declare type M_WatermarkTypeWatermarkTypeToSelf_ChildrenArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_WatermarkTypeSorts>>>;
  where?: Maybe<M_WatermarkType_T_Predicate>;
};
export declare type M_WatermarkTypeList = {
  __typename?: 'M_WatermarkTypeList';
  /** Information of the current page */
  pageInfo?: Maybe<PageInfo>;
  /** Results for current page */
  results?: Maybe<Array<Maybe<M_WatermarkType>>>;
  /** Total number of results (all pages) */
  total?: Maybe<Scalars['Int']>;
};
export declare enum M_WatermarkTypeSorts {
  CreatedbyAsc = "CREATEDBY_ASC",
  CreatedbyDesc = "CREATEDBY_DESC",
  CreatedonAsc = "CREATEDON_ASC",
  CreatedonDesc = "CREATEDON_DESC",
  EntityVisualizationAsc = "ENTITY_VISUALIZATION_ASC",
  EntityVisualizationDesc = "ENTITY_VISUALIZATION_DESC",
  IdAsc = "ID_ASC",
  IdDesc = "ID_DESC",
  ModifiedbyAsc = "MODIFIEDBY_ASC",
  ModifiedbyDesc = "MODIFIEDBY_DESC",
  ModifiedonAsc = "MODIFIEDON_ASC",
  ModifiedonDesc = "MODIFIEDON_DESC",
  TaxonomydescriptionAsc = "TAXONOMYDESCRIPTION_ASC",
  TaxonomydescriptionDesc = "TAXONOMYDESCRIPTION_DESC",
  TaxonomylabelAsc = "TAXONOMYLABEL_ASC",
  TaxonomylabelDesc = "TAXONOMYLABEL_DESC",
  TaxonomynameAsc = "TAXONOMYNAME_ASC",
  TaxonomynameDesc = "TAXONOMYNAME_DESC",
  TaxonomysynonymsAsc = "TAXONOMYSYNONYMS_ASC",
  TaxonomysynonymsDesc = "TAXONOMYSYNONYMS_DESC",
}
export declare type M_WatermarkType_T_Predicate = {
  AND?: Maybe<Array<M_WatermarkType_T_Predicate>>;
  OR?: Maybe<Array<M_WatermarkType_T_Predicate>>;
  createdBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_contains?: Maybe<Scalars['String']>;
  createdBy_doesnotcontain?: Maybe<Scalars['String']>;
  createdBy_doesnotendwith?: Maybe<Scalars['String']>;
  createdBy_doesnotstartwith?: Maybe<Scalars['String']>;
  createdBy_endswith?: Maybe<Scalars['String']>;
  createdBy_eq?: Maybe<Scalars['String']>;
  createdBy_neq?: Maybe<Scalars['String']>;
  createdBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_startswith?: Maybe<Scalars['String']>;
  createdOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  createdOn_eq?: Maybe<Scalars['DateTime']>;
  createdOn_gt?: Maybe<Scalars['DateTime']>;
  createdOn_lt?: Maybe<Scalars['DateTime']>;
  createdOn_neq?: Maybe<Scalars['DateTime']>;
  /** The text to search for */
  fulltext?: Maybe<Scalars['String']>;
  id_anyOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_eq?: Maybe<Scalars['ID']>;
  id_neq?: Maybe<Scalars['ID']>;
  id_noneOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  modifiedBy_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_contains?: Maybe<Scalars['String']>;
  modifiedBy_doesnotcontain?: Maybe<Scalars['String']>;
  modifiedBy_doesnotendwith?: Maybe<Scalars['String']>;
  modifiedBy_doesnotstartwith?: Maybe<Scalars['String']>;
  modifiedBy_endswith?: Maybe<Scalars['String']>;
  modifiedBy_eq?: Maybe<Scalars['String']>;
  modifiedBy_neq?: Maybe<Scalars['String']>;
  modifiedBy_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiedBy_startswith?: Maybe<Scalars['String']>;
  modifiedOn_between?: Maybe<Array<Maybe<Scalars['DateTime']>>>;
  modifiedOn_eq?: Maybe<Scalars['DateTime']>;
  modifiedOn_gt?: Maybe<Scalars['DateTime']>;
  modifiedOn_lt?: Maybe<Scalars['DateTime']>;
  modifiedOn_neq?: Maybe<Scalars['DateTime']>;
  taxonomyName_allOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxonomyName_anyOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxonomyName_contains?: Maybe<Scalars['String']>;
  taxonomyName_doesnotcontain?: Maybe<Scalars['String']>;
  taxonomyName_doesnotendwith?: Maybe<Scalars['String']>;
  taxonomyName_doesnotstartwith?: Maybe<Scalars['String']>;
  taxonomyName_endswith?: Maybe<Scalars['String']>;
  taxonomyName_eq?: Maybe<Scalars['String']>;
  taxonomyName_neq?: Maybe<Scalars['String']>;
  taxonomyName_noneOf?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxonomyName_startswith?: Maybe<Scalars['String']>;
  watermarkTypeToSelf_Ancestors?: Maybe<Array<Scalars['ID']>>;
  watermarkTypeToSelf_Parent?: Maybe<WatermarkTypeToSelfPredicate>;
};
/** Query on the PCMBrandToAsset ancestor relation (M.Brand->M.Asset) */
export declare type PcmBrandToAssetPredicate = {
  m_Brand_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToSelf_Parent?: Maybe<PcmBrandToSelfPredicate>;
};
/** Query on the PCMBrandToMasterAsset ancestor relation (M.Brand->M.Asset) */
export declare type PcmBrandToMasterAssetPredicate = {
  m_Brand_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMBrandToSelf_Parent?: Maybe<PcmBrandToSelfPredicate>;
};
/** Query on the PCMBrandToSelf ancestor relation (M.Brand->M.Brand) */
export declare type PcmBrandToSelfPredicate = {
  m_Brand_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the PCMMarketToSelf ancestor relation (M.PCM.Market->M.PCM.Market) */
export declare type PcmMarketToSelfPredicate = {
  m_PCM_Market_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the PCMProductCategoryToSelf ancestor relation (M.PCM.ProductCategory->M.PCM.ProductCategory) */
export declare type PcmProductCategoryToSelfPredicate = {
  m_PCM_ProductCategory_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the PCMProductToAsset ancestor relation (M.PCM.Product->M.Asset) */
export declare type PcmProductToAssetPredicate = {
  m_PCM_Product_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToProductVergoedingen_Parents?: Maybe<PcmProductToProductVergoedingenPredicate>;
  yearToPCMProduct?: Maybe<YearToPcmProductPredicate>;
};
/** Query on the PCMProductToContent ancestor relation (M.PCM.Product->M.Content) */
export declare type PcmProductToContentPredicate = {
  m_PCM_Product_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToProductVergoedingen_Parents?: Maybe<PcmProductToProductVergoedingenPredicate>;
  yearToPCMProduct?: Maybe<YearToPcmProductPredicate>;
};
/** Query on the PCMProductToMasterAsset ancestor relation (M.PCM.Product->M.Asset) */
export declare type PcmProductToMasterAssetPredicate = {
  m_PCM_Product_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pCMProductToProductVergoedingen_Parents?: Maybe<PcmProductToProductVergoedingenPredicate>;
  yearToPCMProduct?: Maybe<YearToPcmProductPredicate>;
};
/** Query on the PCMProductToProductVergoedingen ancestor relation (M.PCM.Product->M.PCM.Product) */
export declare type PcmProductToProductVergoedingenPredicate = {
  m_PCM_Product_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  yearToPCMProduct?: Maybe<YearToPcmProductPredicate>;
};
export declare type PageInfo = {
  __typename?: 'PageInfo';
  /** Contains the encoded value of the cursor pointing to the last result of the current page */
  endCursor?: Maybe<Scalars['String']>;
  /** Equals 'true' in case the next page contains results, otherwise 'false' */
  hasNext?: Maybe<Scalars['Boolean']>;
};
export declare type Query = {
  __typename?: 'Query';
  /** Select multiple C_YearList using search criteria */
  allC_Year?: Maybe<C_YearList>;
  /** Select multiple FaqList using search criteria */
  allFaq?: Maybe<FaqList>;
  /** Select multiple M_AssetList using search criteria */
  allM_Asset?: Maybe<M_AssetList>;
  /** Select multiple M_BrandList using search criteria */
  allM_Brand?: Maybe<M_BrandList>;
  /** Select multiple M_CMP_AudienceList using search criteria */
  allM_CMP_Audience?: Maybe<M_Cmp_AudienceList>;
  /** Select multiple M_CMP_CampaignList using search criteria */
  allM_CMP_Campaign?: Maybe<M_Cmp_CampaignList>;
  /** Select multiple M_CMP_CampaignTypeList using search criteria */
  allM_CMP_CampaignType?: Maybe<M_Cmp_CampaignTypeList>;
  /** Select multiple M_CMP_RegionList using search criteria */
  allM_CMP_Region?: Maybe<M_Cmp_RegionList>;
  /** Select multiple M_ChannelList using search criteria */
  allM_Channel?: Maybe<M_ChannelList>;
  /** Select multiple M_ChannelAccountList using search criteria */
  allM_ChannelAccount?: Maybe<M_ChannelAccountList>;
  /** Select multiple M_ContentList using search criteria */
  allM_Content?: Maybe<M_ContentList>;
  /** Select multiple M_ContentCollectionList using search criteria */
  allM_ContentCollection?: Maybe<M_ContentCollectionList>;
  /** Select multiple M_ContentTypeList using search criteria */
  allM_ContentType?: Maybe<M_ContentTypeList>;
  /** Select multiple M_Content_AdvertisementList using search criteria */
  allM_Content_Advertisement?: Maybe<M_Content_AdvertisementList>;
  /** Select multiple M_Content_BlogList using search criteria */
  allM_Content_Blog?: Maybe<M_Content_BlogList>;
  /** Select multiple M_Content_EmailList using search criteria */
  allM_Content_Email?: Maybe<M_Content_EmailList>;
  /** Select multiple M_Content_RecipeList using search criteria */
  allM_Content_Recipe?: Maybe<M_Content_RecipeList>;
  /** Select multiple M_Content_SocialMediaMessageList using search criteria */
  allM_Content_SocialMediaMessage?: Maybe<M_Content_SocialMediaMessageList>;
  /** Select multiple M_Content_WebinarList using search criteria */
  allM_Content_Webinar?: Maybe<M_Content_WebinarList>;
  /** Select multiple M_Content_WhitePaperList using search criteria */
  allM_Content_WhitePaper?: Maybe<M_Content_WhitePaperList>;
  /** Select multiple M_LocalizationList using search criteria */
  allM_Localization?: Maybe<M_LocalizationList>;
  /** Select multiple M_PCM_MarketList using search criteria */
  allM_PCM_Market?: Maybe<M_Pcm_MarketList>;
  /** Select multiple M_PCM_ProductList using search criteria */
  allM_PCM_Product?: Maybe<M_Pcm_ProductList>;
  /** Select multiple M_PCM_ProductCategoryList using search criteria */
  allM_PCM_ProductCategory?: Maybe<M_Pcm_ProductCategoryList>;
  /** Select multiple M_PublicLinkList using search criteria */
  allM_PublicLink?: Maybe<M_PublicLinkList>;
  /** Select multiple M_WatermarkTypeList using search criteria */
  allM_WatermarkType?: Maybe<M_WatermarkTypeList>;
  /** Select a single C.Year using its UID */
  c_Year?: Maybe<C_Year>;
  /** Select a single Faq using its UID */
  faq?: Maybe<Faq>;
  /** Select a single M.Asset using its UID */
  m_Asset?: Maybe<M_Asset>;
  /** Select a single M.Brand using its UID */
  m_Brand?: Maybe<M_Brand>;
  /** Select a single M.CMP.Audience using its UID */
  m_CMP_Audience?: Maybe<M_Cmp_Audience>;
  /** Select a single M.CMP.Campaign using its UID */
  m_CMP_Campaign?: Maybe<M_Cmp_Campaign>;
  /** Select a single M.CMP.CampaignType using its UID */
  m_CMP_CampaignType?: Maybe<M_Cmp_CampaignType>;
  /** Select a single M.CMP.Region using its UID */
  m_CMP_Region?: Maybe<M_Cmp_Region>;
  /** Select a single M.Channel using its UID */
  m_Channel?: Maybe<M_Channel>;
  /** Select a single M.ChannelAccount using its UID */
  m_ChannelAccount?: Maybe<M_ChannelAccount>;
  /** Select a single M.Content using its UID */
  m_Content?: Maybe<Im_Content>;
  /** Select a single M.ContentCollection using its UID */
  m_ContentCollection?: Maybe<M_ContentCollection>;
  /** Select a single M.ContentType using its UID */
  m_ContentType?: Maybe<M_ContentType>;
  /** Select a single M.Content using its UID */
  m_Content_Advertisement?: Maybe<M_Content_Advertisement>;
  /** Select a single M.Content using its UID */
  m_Content_Blog?: Maybe<M_Content_Blog>;
  /** Select a single M.Content using its UID */
  m_Content_Email?: Maybe<M_Content_Email>;
  /** Select a single M.Content using its UID */
  m_Content_Recipe?: Maybe<M_Content_Recipe>;
  /** Select a single M.Content using its UID */
  m_Content_SocialMediaMessage?: Maybe<M_Content_SocialMediaMessage>;
  /** Select a single M.Content using its UID */
  m_Content_Webinar?: Maybe<M_Content_Webinar>;
  /** Select a single M.Content using its UID */
  m_Content_WhitePaper?: Maybe<M_Content_WhitePaper>;
  /** Select a single M.Localization using its UID */
  m_Localization?: Maybe<M_Localization>;
  /** Select a single M.PCM.Market using its UID */
  m_PCM_Market?: Maybe<M_Pcm_Market>;
  /** Select a single M.PCM.Product using its UID */
  m_PCM_Product?: Maybe<M_Pcm_Product>;
  /** Select a single M.PCM.ProductCategory using its UID */
  m_PCM_ProductCategory?: Maybe<M_Pcm_ProductCategory>;
  /** Select a single M.PublicLink using its UID */
  m_PublicLink?: Maybe<M_PublicLink>;
  /** Select a single M.WatermarkType using its UID */
  m_WatermarkType?: Maybe<M_WatermarkType>;
};
export declare type QueryAllC_YearArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<C_YearSorts>>>;
  where?: Maybe<C_Year_T_Predicate>;
};
export declare type QueryAllFaqArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<FaqSorts>>>;
  where?: Maybe<FaqPredicate>;
};
export declare type QueryAllM_AssetArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_AssetSorts>>>;
  where?: Maybe<M_AssetPredicate>;
};
export declare type QueryAllM_BrandArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_BrandSorts>>>;
  where?: Maybe<M_Brand_T_Predicate>;
};
export declare type QueryAllM_Cmp_AudienceArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_AudienceSorts>>>;
  where?: Maybe<M_Cmp_Audience_T_Predicate>;
};
export declare type QueryAllM_Cmp_CampaignArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignSorts>>>;
  where?: Maybe<M_Cmp_Campaign_T_Predicate>;
};
export declare type QueryAllM_Cmp_CampaignTypeArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_CampaignTypeSorts>>>;
  where?: Maybe<M_Cmp_CampaignType_T_Predicate>;
};
export declare type QueryAllM_Cmp_RegionArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Cmp_RegionSorts>>>;
  where?: Maybe<M_Cmp_Region_T_Predicate>;
};
export declare type QueryAllM_ChannelArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelSorts>>>;
  where?: Maybe<M_Channel_T_Predicate>;
};
export declare type QueryAllM_ChannelAccountArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ChannelAccountSorts>>>;
  where?: Maybe<M_ChannelAccount_T_Predicate>;
};
export declare type QueryAllM_ContentArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_ContentCollectionArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentCollectionSorts>>>;
  where?: Maybe<M_ContentCollection_T_Predicate>;
};
export declare type QueryAllM_ContentTypeArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentTypeSorts>>>;
  where?: Maybe<M_ContentType_T_Predicate>;
};
export declare type QueryAllM_Content_AdvertisementArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_Content_BlogArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_Content_EmailArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_Content_RecipeArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_Content_SocialMediaMessageArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_Content_WebinarArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_Content_WhitePaperArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_ContentSorts>>>;
  where?: Maybe<M_ContentPredicate>;
};
export declare type QueryAllM_LocalizationArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_LocalizationSorts>>>;
  where?: Maybe<M_Localization_T_Predicate>;
};
export declare type QueryAllM_Pcm_MarketArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_MarketSorts>>>;
  where?: Maybe<M_Pcm_Market_T_Predicate>;
};
export declare type QueryAllM_Pcm_ProductArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductSorts>>>;
  where?: Maybe<M_Pcm_ProductPredicate>;
};
export declare type QueryAllM_Pcm_ProductCategoryArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_Pcm_ProductCategorySorts>>>;
  where?: Maybe<M_Pcm_ProductCategory_T_Predicate>;
};
export declare type QueryAllM_PublicLinkArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_PublicLinkSorts>>>;
  where?: Maybe<M_PublicLinkPredicate>;
};
export declare type QueryAllM_WatermarkTypeArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<M_WatermarkTypeSorts>>>;
  where?: Maybe<M_WatermarkType_T_Predicate>;
};
export declare type QueryC_YearArgs = {
  id: Scalars['String'];
};
export declare type QueryFaqArgs = {
  id: Scalars['String'];
};
export declare type QueryM_AssetArgs = {
  id: Scalars['String'];
};
export declare type QueryM_BrandArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Cmp_AudienceArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Cmp_CampaignArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Cmp_CampaignTypeArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Cmp_RegionArgs = {
  id: Scalars['String'];
};
export declare type QueryM_ChannelArgs = {
  id: Scalars['String'];
};
export declare type QueryM_ChannelAccountArgs = {
  id: Scalars['String'];
};
export declare type QueryM_ContentArgs = {
  id: Scalars['String'];
};
export declare type QueryM_ContentCollectionArgs = {
  id: Scalars['String'];
};
export declare type QueryM_ContentTypeArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_AdvertisementArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_BlogArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_EmailArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_RecipeArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_SocialMediaMessageArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_WebinarArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Content_WhitePaperArgs = {
  id: Scalars['String'];
};
export declare type QueryM_LocalizationArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Pcm_MarketArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Pcm_ProductArgs = {
  id: Scalars['String'];
};
export declare type QueryM_Pcm_ProductCategoryArgs = {
  id: Scalars['String'];
};
export declare type QueryM_PublicLinkArgs = {
  id: Scalars['String'];
};
export declare type QueryM_WatermarkTypeArgs = {
  id: Scalars['String'];
};
/** Query on the RegionToContent ancestor relation (M.CMP.Region->M.Content) */
export declare type RegionToContentPredicate = {
  m_CMP_Region_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the WatermarkTypeToSelf ancestor relation (M.WatermarkType->M.WatermarkType) */
export declare type WatermarkTypeToSelfPredicate = {
  m_WatermarkType_parent_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
/** Query on the YearToPCMProduct ancestor relation (C.Year->M.PCM.Product) */
export declare type YearToPcmProductPredicate = {
  c_YearToSelf_Parent?: Maybe<C_YearToSelfPredicate>;
  c_Year_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type Unnamed_1_QueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type Unnamed_1_Query = ({
  __typename?: 'Query';
} & {
  allM_PCM_Product?: Types.Maybe<({
    __typename?: 'M_PCM_ProductList';
  } & {
    results?: Types.Maybe<Array<Types.Maybe<({
      __typename?: 'M_PCM_Product';
    } & Pick<Types.M_Pcm_Product, 'productName'>)>>>;
  })>;
});
export declare const Document: DocumentNode<Query, any>;